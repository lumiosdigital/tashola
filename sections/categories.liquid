<div class="category-grid">

    <!-- Row 1 -->
    <div class="category-block">
        <a href="{{ routes.collections_url }}/earrings">
            <div class="category-image">
                <div class="category-image-inner"
                    style="background-image: url('{% if section.settings.earrings_image %}{{ section.settings.earrings_image | img_url: 'master' }}{% else %}{{ 'earrings-category.png' | asset_url }}{% endif %}');">
                </div>
                <h3 class="category-title">Earrings</h3>
            </div>
        </a>
    </div>
    <div class="category-block">
        <a href="{{ routes.collections_url }}/rings">
            <div class="category-image">
                <div class="category-image-inner"
                    style="background-image: url('{% if section.settings.rings_image %}{{ section.settings.rings_image | img_url: 'master' }}{% else %}{{ 'rings-category.png' | asset_url }}{% endif %}');">
                </div>
                <h3 class="category-title">Rings</h3>
            </div>
        </a>
    </div>

    <!-- Row 2 -->
    <div class="category-block">
        <a href="{{ routes.collections_url }}/necklaces">
            <div class="category-image">
                <div class="category-image-inner"
                    style="background-image: url('{% if section.settings.necklaces_image %}{{ section.settings.necklaces_image | img_url: 'master' }}{% else %}{{ 'necklaces-category.png' | asset_url }}{% endif %}');">
                </div>
                <h3 class="category-title">Necklaces</h3>
            </div>
        </a>
    </div>
    <div class="category-block">
        <a href="{{ routes.collections_url }}/bracelets">
            <div class="category-image">
                <div class="category-image-inner"
                    style="background-image: url('{% if section.settings.bracelets_image %}{{ section.settings.bracelets_image | img_url: 'master' }}{% else %}{{ 'bracelets-category.png' | asset_url }}{% endif %}');">
                </div>
                <h3 class="category-title">Bracelets</h3>
            </div>
        </a>
    </div>

    <!-- Row 3 -->
    <div class="category-block empty" id="product-section">
        <!-- Product Collection Display -->
        <div class="collection-product-display">
            {% if section.settings.featured_collection != blank %}
            {% assign collection = collections[section.settings.featured_collection] %}

            {% paginate collection.products by 4 limit: 8 %}
            {% if collection.products.size > 0 %}
            <div class="product-grid" id="product-grid">
                {% for product in collection.products %}
                <div class="product-card">
                    <a href="{{ product.url }}">
                        <div class="product-image-container">
                            {% if product.featured_image != blank %}
                            <img class="product-image"
                                src="{{ product.featured_image | img_url: '600x600', crop: 'center' }}"
                                alt="{{ product.title | escape }}" width="600" height="600">
                            {% else %}
                            {{ 'product-1' | placeholder_svg_tag: 'product-image' }}
                            {% endif %}
                        </div>
                    </a>
                    <div class="product-info">
                        <a href="{{ product.url }}">
                            <h3 class="product-title">{{ product.title }}</h3>
                            <div class="product-price">
                                {% if product.compare_at_price > product.price %}
                                <span class="sale-price">{{ product.price | money }}</span>
                                <s>{{ product.compare_at_price | money }}</s>
                                {% else %}
                                <span>{{ product.price | money }}</span>
                                {% endif %}
                            </div>
                        </a>

                        {% if product.variants.size > 1 and product.options_by_name['Material'] != blank %}
                        <div class="product-variants">
                            {% assign material_option = product.options_by_name['Material'] %}
                            {% for value in material_option.values limit: 4 %}
                            {% assign color_code = "" %}
                            {% if value contains 'Gold' %}
                            {% assign color_code = "#E5D295" %}
                            {% elsif value contains 'Silver' %}
                            {% assign color_code = "#CDCCCC" %}
                            {% elsif value contains 'Rose Gold' %}
                            {% assign color_code = "#B76E79" %}
                            {% elsif value contains 'Platinum' %}
                            {% assign color_code = "#BCBCBC" %}
                            {% elsif value contains 'Stainless Steel' %}
                            {% assign color_code = "#E4E4E4" %}
                            {% endif %}
                            {% if color_code != "" %}
                            <div class="variant-color" style="background-color: {{ color_code }};" title="{{ value }}">
                            </div>
                            {% endif %}
                            {% endfor %}
                        </div>
                        {% endif %}
                    </div>
                </div>
                {% endfor %}
            </div>

            {% if paginate.pages > 1 %}
            <div class="pagination" id="pagination-container">
                {% if paginate.previous %}
                <a href="{{ paginate.previous.url }}" class="prev pagination-link"
                    data-page="{{ paginate.previous.page }}" aria-label="Previous page">
                    {% render 'icon-arrow-left' %}
                </a>
                {% else %}
                <div class="prev grayed-out" aria-disabled="true">{% render 'icon-arrow-left-gray' %}</div>
                {% endif %}

                {% if paginate.next %}
                <a href="{{ paginate.next.url }}" class="next pagination-link" data-page="{{ paginate.next.page }}"
                    aria-label="Next page">
                    {% render 'icon-arrow-right' %}
                </a>
                {% else %}
                <div class="next grayed-out" aria-disabled="true">{% render 'icon-arrow-right-gray' %}</div>
                {% endif %}
            </div>
            {% endif %}
            {% else %}
            <p>No products found in this collection</p>
            {% endif %}
            {% endpaginate %}
            {% else %}
            <p>Please select a collection in the theme editor</p>
            {% endif %}
        </div>
    </div>

    <div class="category-block collection-block">
        <a href="{{ section.settings.selected_collection.url }}" class="collection-banner-link">
            <div class="category-image">
                <div class="category-image-inner"
                    style="background-image: url('{% if section.settings.collection_banner_image %}{{ section.settings.collection_banner_image | img_url: 'master' }}{% elsif section.settings.selected_collection.featured_image %}{{ section.settings.selected_collection.featured_image | img_url: 'large' }}{% endif %}');">
                </div>
                <h3 class="collection-dynamic-title">
                    {{ section.settings.selected_collection.title }}
                    <span class="collection-title">Collection</span>
                </h3>
            </div>
        </a>
    </div>

    <!-- Row 4 -->
    <div class="category-block">
        <a href="{{ routes.collections_url }}/personalization">
            <div class="category-image">
                <div class="category-image-inner"
                    style="background-image: url('{% if section.settings.personalization_image %}{{ section.settings.personalization_image | img_url: 'master' }}{% else %}{{ 'personalization-category.png' | asset_url }}{% endif %}');">
                </div>
                <h3 class="category-title">Personalization</h3>
            </div>
        </a>
    </div>
    <div class="category-block">
        <a href="{{ routes.collections_url }}/charms">
            <div class="category-image">
                <div class="category-image-inner"
                    style="background-image: url('{% if section.settings.charms_image %}{{ section.settings.charms_image | img_url: 'master' }}{% else %}{{ 'charms-category.png' | asset_url }}{% endif %}');">
                </div>
                <h3 class="category-title">Charms</h3>
            </div>
        </a>
    </div>

    <!-- Swiper JS and CSS -->
    <link rel="stylesheet" href="https://unpkg.com/swiper/swiper-bundle.min.css" />
    <script src="https://unpkg.com/swiper/swiper-bundle.min.js"></script>
</div>

<style>
    /* Ensure variant colors have the right border in category section */
    .category-block .product-variants .variant-color {
        border: 1px solid #e0e0e0 !important;
    }

    .category-block .variant-radio-container .variant-color {
        border: 1px solid #e0e0e0 !important;
    }

    /* Maintain consistent styling for variant selection */
    .category-block .variant-radio:checked+.variant-color {
        box-shadow: 0 0 0 2px white, 0 0 0 3px var(--color-light-gray) !important;
    }

    /* Mobile-specific styles */
    @media (max-width: 768px) {

        /* Completely override the grid layout on mobile */
        .category-grid {
            display: block !important;
            /* Override any display property */
            position: relative;
        }

        /* Create a wrapper for the first row */
        .category-grid:before {
            content: "";
            display: table;
            clear: both;
        }

        /* Make earrings and rings float side by side (first row) */
        .category-grid .category-block:nth-child(1),
        .category-grid .category-block:nth-child(2) {
            float: left !important;
            width: 50% !important;
            height: 50vh !important;
            display: block !important;
        }

        /* Clear the float after the first row */
        .category-grid .category-block:nth-child(2):after {
            content: "";
            display: table;
            clear: both;
        }

        /* Make necklaces and bracelets float side by side (second row) */
        .category-grid .category-block:nth-child(3),
        .category-grid .category-block:nth-child(4) {
            float: left !important;
            width: 50% !important;
            height: 50vh !important;
            display: block !important;
        }

        /* Clear the float after the second row */
        .category-grid .category-block:nth-child(4):after {
            content: "";
            display: table;
            clear: both;
        }

        /* Collection banner (swap it to appear before collection display) */
        .category-grid .category-block.collection-block {
            width: 100% !important;
            display: block !important;
            clear: both !important;
            height: 60vh !important;
            order: 5;
            /* Put this first in row 3 */
        }

        /* Product grid section (swap it to appear after collection banner) */
        .category-grid .category-block.empty {
            width: 100% !important;
            display: block !important;
            clear: both !important;
            height: auto !important;
            padding: 2rem 1rem 3rem;
            order: 6;
            /* Put this second in row 3 */
        }

        /* Make personalization and charms float side by side (fourth row) */
        .category-grid .category-block:nth-child(7),
        .category-grid .category-block:nth-child(8) {
            float: left !important;
            width: 50% !important;
            height: 50vh !important;
            display: block !important;
        }

        /* Clear the float after the fourth row */
        .category-grid .category-block:nth-child(8):after {
            content: "";
            display: table;
            clear: both;
        }

        .product-grid {
            min-height: 10vh;
        }

        /* Hide pagination on mobile as we'll use Swiper */
        .pagination {
            display: none;
        }

        /* Swiper styles */
        .swiper-container {
            width: 100%;
            overflow: visible;
        }

        .swiper-slide {
            width: 80%;
            padding: 0 5px;
        }

        .swiper-button-next,
        .swiper-button-prev {
            color: var(--color-text);
            background: rgba(255, 255, 255, 0.8);
            width: 35px;
            height: 35px;
            border-radius: 50%;
        }

        .swiper-button-next:after,
        .swiper-button-prev:after {
            font-size: 18px;
        }
    }

    /* Additional styles for smaller screens */
    @media (max-width: 576px) {

        .category-grid .category-block:nth-child(1),
        .category-grid .category-block:nth-child(2),
        .category-grid .category-block:nth-child(3),
        .category-grid .category-block:nth-child(4),
        .category-grid .category-block:nth-child(7),
        .category-grid .category-block:nth-child(8) {
            height: 40vh !important;
        }

        .swiper-slide {
            width: 80%;
        }

        .category-block.collection-block {
            height: 60vh !important;
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Initialize the pagination functionality
        initPagination();

        // Initialize product variants
        initProductVariants();

        // Initialize Swiper on mobile
        initMobileSwiper();

        function initPagination() {
            // Add event listeners to all pagination links
            const paginationLinks = document.querySelectorAll('.pagination-link');
            paginationLinks.forEach(function (link) {
                link.addEventListener('click', handlePaginationClick);
            });
        }

        function handlePaginationClick(e) {
            e.preventDefault();

            const url = this.getAttribute('href');
            loadPage(url);

            // Update URL without refreshing (optional but helps with browser history)
            window.history.pushState({ path: url }, '', url);
        }

        function loadPage(url) {
            // Remember scroll position
            const currentScrollPosition = window.pageYOffset || document.documentElement.scrollTop;

            // Add a loading indicator if you want
            const productGrid = document.getElementById('product-grid');
            productGrid.classList.add('loading');

            // Fetch the new page content
            fetch(url)
                .then(response => response.text())
                .then(html => {
                    // Create a temporary element to parse the HTML
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');

                    // Find the product grid in the fetched content
                    const newProductGrid = doc.querySelector('#product-grid');
                    const newPagination = doc.querySelector('#pagination-container');

                    // Replace the existing product grid with the new one
                    if (newProductGrid) {
                        productGrid.innerHTML = newProductGrid.innerHTML;
                        productGrid.classList.remove('loading');

                        // Re-initialize product variants for the new content
                        initProductVariants();

                        // Reinitialize Swiper if on mobile
                        if (window.innerWidth <= 768) {
                            initMobileSwiper();
                        }
                    }

                    // Replace the pagination
                    if (newPagination) {
                        const paginationContainer = document.getElementById('pagination-container');
                        paginationContainer.innerHTML = newPagination.innerHTML;

                        // Re-add event listeners to the new pagination links
                        initPagination();
                    }

                    // Maintain the scroll position
                    window.scrollTo(0, currentScrollPosition);
                })
                .catch(error => {
                    console.error('Error loading the products:', error);
                    productGrid.classList.remove('loading');
                });
        }

        // Handle browser back/forward navigation
        window.addEventListener('popstate', function (e) {
            if (e.state && e.state.path) {
                loadPage(e.state.path);
            } else {
                loadPage(window.location.href);
            }
        });

        // Add responsive handling for window resize
        window.addEventListener('resize', function () {
            // Handle any specific layout adjustments needed on resize
            adjustLayoutForScreenSize();
        });

        // Initial layout adjustment
        adjustLayoutForScreenSize();

        function adjustLayoutForScreenSize() {
            // Example of adjusting layout based on screen size
            // This can be customized based on specific needs
            const isMobile = window.innerWidth <= 768;
            const productGrid = document.getElementById('product-grid');

            if (productGrid) {
                // Apply any specific adjustments needed
                // For example, you might want to change the number of visible products
            }
        }

        // Extract this functionality into its own function that can be called after each page load
        function initProductVariants() {
            // Add CSS for the enhanced radio button styles
            if (!document.getElementById('variant-styles')) {
                const styleElement = document.createElement('style');
                styleElement.id = 'variant-styles';
                styleElement.textContent = `
                .variant-radio-container {
                    position: relative;
                    margin-right: 5px;
                    cursor: pointer;
                }
                .variant-color {
                    width: 18px;
                    height: 18px;
                    border-radius: 50%;
                    display: inline-block;
                    transition: all 0.2s ease;
                    border: none; /* Remove default border */
                }
                .variant-radio:checked + .variant-color {
                    box-shadow: 0 0 0 3px #F6F4F3), rgba(246, 244, 243, 1);
                }
                .variant-radio-container:hover .variant-color {
                    transform: scale(1.1);
                }
            `;
                document.head.appendChild(styleElement);
            }

            // Get all product cards
            const productCards = document.querySelectorAll('.product-card');

            // For each product card
            productCards.forEach(function (card) {
                const variantsContainer = card.querySelector('.product-variants');
                if (!variantsContainer) return;

                // Clear existing variant colors
                variantsContainer.innerHTML = '';

                const imageContainer = card.querySelector('.product-image-container');
                const productLink = card.querySelector('a[href*="/products/"]');
                const productImage = imageContainer ? imageContainer.querySelector('img') : null;

                if (!productLink || !productImage) return;

                // Extract product URL and handle
                const productUrl = productLink.getAttribute('href');
                const productHandle = productUrl.split('/products/')[1].split('?')[0];

                // Store original image
                const originalSrc = productImage.src;
                productImage.setAttribute('data-original-src', originalSrc);

                // Fetch product data using Shopify's product JSON endpoint
                fetch(`/products/${productHandle}.js`)
                    .then(response => response.json())
                    .then(product => {
                        // Get the material option if it exists
                        const materialOptionIndex = product.options.findIndex(option =>
                            option.name.toLowerCase() === 'material' ||
                            option.name.toLowerCase() === 'color'
                        );

                        if (materialOptionIndex === -1) return;

                        const materialValues = product.options[materialOptionIndex].values;
                        const variantImages = {};

                        // Store all variant IDs associated with each material option
                        const variantIds = {};

                        // Create a mapping of variant values to images
                        product.variants.forEach(variant => {
                            const optionValue = variant.options[materialOptionIndex];
                            if (variant.featured_image) {
                                variantImages[optionValue] = variant.featured_image.src;
                            }
                            // Store the variant ID for each material option
                            variantIds[optionValue] = variant.id;
                        });

                        // Create radio buttons for each material option
                        materialValues.forEach((material, index) => {
                            const colorCode = getColorCodeForMaterial(material);
                            const variantId = variantIds[material];

                            const radioContainer = document.createElement('label');
                            radioContainer.className = 'variant-radio-container';

                            const radio = document.createElement('input');
                            radio.type = 'radio';
                            radio.name = `variant-${productHandle}`;
                            radio.value = material;
                            radio.className = 'variant-radio';
                            radio.style.display = 'none';
                            radio.setAttribute('data-variant-id', variantId);
                            radio.setAttribute('aria-label', material);

                            // Check the Gold option by default, or the first option if Gold isn't available
                            if ((material.toLowerCase().includes('gold') && !material.toLowerCase().includes('rose')) ||
                                (index === 0 && !materialValues.some(m => m.toLowerCase().includes('gold') && !m.toLowerCase().includes('rose')))) {
                                radio.checked = true;
                                // Set the initial image to the selected variant
                                if (variantImages[material]) {
                                    productImage.src = variantImages[material];
                                }
                            }

                            const colorDisplay = document.createElement('span');
                            colorDisplay.className = 'variant-color';
                            colorDisplay.style.backgroundColor = colorCode;
                            colorDisplay.title = material;

                            radioContainer.appendChild(radio);
                            radioContainer.appendChild(colorDisplay);
                            variantsContainer.appendChild(radioContainer);

                            // Add event listener to change the image when a radio button is selected
                            radio.addEventListener('change', function () {
                                if (this.checked) {
                                    if (variantImages[material]) {
                                        // Use variant image if available
                                        productImage.src = variantImages[material];
                                    } else if (index === 0) {
                                        // If this is the first option and no image, use original
                                        productImage.src = originalSrc;
                                    } else {
                                        // Create a simple SVG placeholder with the product title as text
                                        const productTitle = card.querySelector('.product-title').textContent;
                                        const svgPlaceholder = `
                                            <svg xmlns="http://www.w3.org/2000/svg" width="600" height="600" viewBox="0 0 600 600">
                                                <rect width="100%" height="100%" fill="#f8f8f8"/>
                                                <text x="50%" y="50%" font-family="serif" font-size="32" text-anchor="middle" fill="#999">
                                                    ${productTitle}
                                                </text>
                                                <text x="50%" y="55%" font-family="serif" font-size="20" text-anchor="middle" fill="#999">
                                                    ${material}
                                                </text>
                                            </svg>`;

                                        // Convert SVG to a data URL
                                        const encodedSvg = encodeURIComponent(svgPlaceholder);
                                        productImage.src = `data:image/svg+xml,${encodedSvg}`;
                                    }
                                }
                            });
                        });
                    })
                    .catch(error => {
                        console.error('Error fetching product data:', error);
                    });
            });
        }

        // Helper function to get color code based on material name
        function getColorCodeForMaterial(material) {
            const lowerMaterial = material.toLowerCase();
            if (lowerMaterial.includes('gold') && !lowerMaterial.includes('rose')) {
                return "#E5D295";  // Gold
            } else if (lowerMaterial.includes('silver') || lowerMaterial.includes('sterling')) {
                return "#CDCCCC";  // Silver
            } else if (lowerMaterial.includes('rose') || lowerMaterial.includes('rosegold')) {
                return "#B76E79";  // Rose Gold
            } else if (lowerMaterial.includes('platinum')) {
                return "#E5E4E2";  // Platinum
            } else {
                // Default dark color
            }
        }

        // Initialize Swiper for mobile devices
        function initMobileSwiper() {
            if (window.innerWidth <= 768) {
                const productGrid = document.getElementById('product-grid');
                if (!productGrid) return;

                // Check if Swiper is already initialized
                if (productGrid.classList.contains('swiper-initialized')) return;

                // Get all product cards
                const productCards = productGrid.querySelectorAll('.product-card');
                if (productCards.length === 0) return;

                // Create Swiper structure
                const swiperContainer = document.createElement('div');
                swiperContainer.className = 'swiper-container';

                const swiperWrapper = document.createElement('div');
                swiperWrapper.className = 'swiper-wrapper';

                // Move all products into the swiper
                productCards.forEach(card => {
                    const swiperSlide = document.createElement('div');
                    swiperSlide.className = 'swiper-slide';
                    swiperSlide.appendChild(card.cloneNode(true));
                    swiperWrapper.appendChild(swiperSlide);
                });

                // Build the swiper structure
                swiperContainer.appendChild(swiperWrapper);

                // Add navigation
                const prevButton = document.createElement('div');
                prevButton.className = 'swiper-button-prev';

                const nextButton = document.createElement('div');
                nextButton.className = 'swiper-button-next';

                swiperContainer.appendChild(prevButton);
                swiperContainer.appendChild(nextButton);

                // Clear the original grid and append the swiper
                productGrid.innerHTML = '';
                productGrid.appendChild(swiperContainer);
                productGrid.classList.add('swiper-initialized');

                // Initialize Swiper
                new Swiper('.swiper-container', {
                    slidesPerView: 'auto',
                    spaceBetween: 10,
                    centeredSlides: false,
                    grabCursor: true,
                    navigation: {
                        nextEl: '.swiper-button-next',
                        prevEl: '.swiper-button-prev',
                    },
                    breakpoints: {
                        320: {
                            slidesPerView: 1.3,
                            spaceBetween: 10,
                        },
                        480: {
                            slidesPerView: 2,
                            spaceBetween: 15,
                        }
                    }
                });

                // Re-initialize product variants
                initProductVariants();
            }
        }
        
        
    });
    // Function to reorder blocks on mobile
    function reorderMobileBlocks() {
        if (window.innerWidth <= 768) {
            const categoryGrid = document.querySelector('.category-grid');
            if (!categoryGrid) return;
            
            // Get the two blocks we want to swap
            const emptyBlock = categoryGrid.querySelector('.category-block.empty');
            const collectionBlock = categoryGrid.querySelector('.category-block.collection-block');
            
            if (!emptyBlock || !collectionBlock) return;
            
            // Get the parent node
            const parent = emptyBlock.parentNode;
            
            // Get the fourth block as reference (to insert after it)
            const fourthBlock = categoryGrid.querySelector('.category-block:nth-child(4)');
            
            if (fourthBlock) {
                // Move collection banner after the fourth block (before empty block)
                parent.insertBefore(collectionBlock, fourthBlock.nextSibling);
                // Move empty block after collection banner
                parent.insertBefore(emptyBlock, collectionBlock.nextSibling);
            }
        }
    }

    // Call the function when DOM is loaded
    document.addEventListener('DOMContentLoaded', reorderMobileBlocks);
    // Call the function when window is resized
    window.addEventListener('resize', reorderMobileBlocks);
</script>

{% schema %}
{
"name": "Categories Section",
"limit": 1,
"settings": [
{
"type": "collection",
"id": "selected_collection",
"label": "Select Collection",
"info": "Choose a collection to display on this block."
},
{
"type": "collection",
"id": "featured_collection",
"label": "Products to Display",
"info": "Choose a collection for the products grid"
},
{
"type": "image_picker",
"id": "collection_banner_image",
"label": "Collection Banner Image",
"info": "Upload a custom image for the collection banner. If left blank, the collection's featured image will be used."
},
{
"type": "image_picker",
"id": "earrings_image",
"label": "Earrings Image",
"info": "Upload an image for the Earrings category."
},
{
"type": "image_picker",
"id": "rings_image",
"label": "Rings Image",
"info": "Upload an image for the Rings category."
},
{
"type": "image_picker",
"id": "necklaces_image",
"label": "Necklaces Image",
"info": "Upload an image for the Necklaces category."
},
{
"type": "image_picker",
"id": "bracelets_image",
"label": "Bracelets Image",
"info": "Upload an image for the Bracelets category."
},
{
"type": "image_picker",
"id": "personalization_image",
"label": "Personalization Image",
"info": "Upload an image for the Personalization category."
},
{
"type": "image_picker",
"id": "charms_image",
"label": "Charms Image",
"info": "Upload an image for the Charms category."
}
],
"presets": [
{
"name": "Default",
"category": "Custom"
}
]
}
{% endschema %}