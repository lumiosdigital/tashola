{% comment %}
Simplified categories section with flexible height and proper display of all blocks
{% endcomment %}

<div class="categories-section">
    <div class="category-grid">
        {% for block in section.blocks %}
        {% case block.type %}
        {% when 'category_row' %}
        <div class="category-item" {{ block.shopify_attributes }}>
            <a href="{% if block.settings.collection != blank %}{{ block.settings.collection.url }}{% else %}{{ routes.collections_url }}/{{ block.settings.collection_handle }}{% endif %}"
                class="category-link">
                <div class="category-image-container">
                    <div class="category-image"
                        style="background-image: url('{% if block.settings.category_image %}{{ block.settings.category_image | img_url: 'master' }}{% else %}{{ block.settings.collection_handle | append: '-category.png' | asset_url }}{% endif %}');">
                    </div>
                    <h3 class="category-title" style="color: {% if block.settings.text_color == 'black' %}#373736{% else %}white{% endif %};">{{ block.settings.category_title }}</h3>
                </div>
            </a>
        </div>
        {% when 'collection_display' %}
        <div class="collection-display-row {% if block.settings.layout_direction == 'banner-right' %}reverse{% endif %}"
            {{ block.shopify_attributes }}>
            <!-- Collection Banner -->
            <div class="collection-banner">
                <a href="{{ block.settings.selected_collection.url }}" class="collection-banner-link">
                    <div class="category-image-container">
                        <div class="category-image"
                            style="background-image: url('{% if block.settings.collection_banner_image %}{{ block.settings.collection_banner_image | img_url: 'master' }}{% elsif block.settings.selected_collection.featured_image %}{{ block.settings.selected_collection.featured_image | img_url: 'large' }}{% endif %}');">
                        </div>
                        <h3 class="collection-dynamic-title" style="color: {% if block.settings.text_color == 'black' %}#373736{% else %}white{% endif %};">{{ block.settings.selected_collection.title }}<span class="collection-subtitle" style="color: {% if block.settings.text_color == 'black' %}#373736{% else %}white{% endif %};"> Collection</span></h3>
                    </div>
                </a>
            </div>

            <!-- Product Collection Display -->
            <div class="product-display">
                <div class="collection-product-display">
                    {% if block.settings.featured_collection != blank %}
                    {% assign collection = collections[block.settings.featured_collection] %}
                    {% paginate collection.products by 4 %}
                    {% if collection.products.size > 0 %}
                    <div class="product-grid" id="product-grid-{{ block.id }}">
                        {% for product in collection.products %}
                        <div class="product-card">
                            <a href="{{ product.url }}">
                                <div class="product-image-container">
                                    {% if product.featured_image != blank %}
                                    <img class="product-image"
                                        src="{{ product.featured_image | img_url: '600x600', crop: 'center' }}"
                                        alt="{{ product.title | escape }}" width="600" height="600">
                                    {% else %}
                                    {{ 'product-1' | placeholder_svg_tag: 'product-image' }}
                                    {% endif %}
                                </div>
                            </a>
                            <div class="product-info">
                                <a href="{{ product.url }}">
                                    <h3 class="product-title">{{ product.title }}</h3>
                                    <div class="product-price">
                                        {% if product.compare_at_price > product.price %}
                                        <span class="sale-price">{{ product.price | money }}</span>
                                        <s>{{ product.compare_at_price | money }}</s>
                                        {% else %}
                                        <span>{{ product.price | money }}</span>
                                        {% endif %}
                                    </div>
                                </a>

                                {% if product.variants.size > 1 and product.options_by_name['Material'] != blank %}
                                <div class="product-variants">
                                    {% assign material_option = product.options_by_name['Material'] %}
                                    {% for value in material_option.values limit: 4 %}
                                    {% assign color_code = "" %}
                                    {% if value contains 'Gold' %}
                                    {% assign color_code = "#E5D295" %}
                                    {% elsif value contains 'Silver' %}
                                    {% assign color_code = "#CDCCCC" %}
                                    {% elsif value contains 'Rose Gold' %}
                                    {% assign color_code = "#B76E79" %}
                                    {% elsif value contains 'Platinum' %}
                                    {% assign color_code = "#BCBCBC" %}
                                    {% elsif value contains 'Stainless Steel' %}
                                    {% assign color_code = "#E4E4E4" %}
                                    {% endif %}

                                    {% if color_code != "" %}
                                    <div class="variant-color" style="background-color: {{ color_code }};" title="{{ value }}">
                                    </div>
                                    {% endif %}
                                    {% endfor %}
                                </div>
                                {% endif %}
                            </div>
                        </div>
                        {% endfor %}
                    </div>

                    {% if paginate.pages > 1 %}
                    <div class="pagination" id="pagination-container-{{ block.id }}">
                        {% if paginate.previous %}
                        <a href="{{ paginate.previous.url }}" class="prev pagination-link" data-page="{{ paginate.previous.page }}"
                            data-block-id="{{ block.id }}" aria-label="Previous page">
                            {% render 'icon-arrow-left' %}
                        </a>
                        {% else %}
                        <div class="prev grayed-out" aria-disabled="true">{% render 'icon-arrow-left-gray' %}</div>
                        {% endif %}

                        {% if paginate.next %}
                        <a href="{{ paginate.next.url }}" class="next pagination-link" data-page="{{ paginate.next.page }}"
                            data-block-id="{{ block.id }}" aria-label="Next page">
                            {% render 'icon-arrow-right' %}
                        </a>
                        {% else %}
                        <div class="next grayed-out" aria-disabled="true">{% render 'icon-arrow-right-gray' %}</div>
                        {% endif %}
                    </div>
                    {% endif %}
                    {% else %}
                    <p class="no-products-message">No products found in this collection</p>
                    {% endif %}
                    {% endpaginate %}
                    {% else %}
                    <p class="no-collection-message">Please select a collection in the theme editor</p>
                    {% endif %}
                </div>
            </div>
        </div>
        {% endcase %}
        {% endfor %}
    </div>
</div>

<!-- Swiper JS and CSS for mobile -->
<link rel="stylesheet" href="https://unpkg.com/swiper/swiper-bundle.min.css" />
<script src="https://unpkg.com/swiper/swiper-bundle.min.js"></script>

<style>
    /* Main container */
    .categories-section {
        width: 100%;
    }

    /* Category grid - much simpler layout using CSS grid */
    .category-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        width: 100%;
    }

    /* Regular category items */
    .category-item {
        height: 100vh;
        position: relative;
        overflow: hidden;
    }

    .category-link {
        display: block;
        width: 100%;
        height: 100%;
    }

    /* Collection display row - spans full width */
    .collection-display-row {
        display: flex;
        width: 100%;
        grid-column: 1 / span 2;
    }

    .collection-display-row.reverse {
        flex-direction: row-reverse;
    }

    .collection-banner {
        flex: 0 0 50%;
        width: 50%;
        height: 100vh;
        position: relative;
        overflow: hidden;
    }

    .collection-banner-link {
        display: block;
        width: 100%;
        height: 100%;
    }

    .product-display {
        flex: 0 0 50%;
        /* width: 50%; */
        height: 100vh;
        padding: 2.5rem 1.75rem 1.5rem 1.75rem;
        background-color: #F6F4F3;
        overflow: auto;
    }

    /* Image containers */
    .category-image-container {
        width: 100%;
        height: 100%;
        position: relative;
        overflow: hidden;
        display: flex;
        justify-content: center;
        align-items: flex-end;
    }

    .category-image {
        width: 100%;
        height: 100%;
        background-size: cover;
        background-position: center;
        transition: transform 1s ease;
    }

    .category-image-container:hover .category-image {
        transform: scale(1.05);
    }

    /* Titles */
    .category-title {
        color: white;
        font-size: 2.25rem;
        text-align: center;
        margin-bottom: 4rem;
        font-family: var(--font-heading);
        font-weight: 600;
        font-style: normal;
        position: absolute;
        left: 50%;
        transform: translateX(-50%);
        z-index: 2;
        width: 100%;
    }

    .collection-title {
        color: white;
        font-size: 2.25rem;
        text-align: center;
        margin-bottom: 4rem;
        font-family: var(--font-heading);
        font-weight: 600;
        font-style: normal;
        position: absolute;
        left: 50%;
        transform: translateX(-50%);
        bottom: 1.25rem;
        z-index: 2;
        width: 100%;
    }

    .collection-dynamic-title {
    color: white;
    font-size: 2.25rem;
    text-align: center;
    margin-bottom: 4rem;
    font-family: var(--font-heading);
    font-weight: 600;
    font-style: normal;
    }

    h3.collection-dynamic-title {
        position: absolute;
        color: white;
        font-size: 2.25rem;
        text-align: center;
        font-family: var(--font-heading);
        font-weight: 600;
        bottom: 1.25rem;
        z-index: 2;
        /* Add text shadow for better readability */
    }

    .collection-subtitle {
        color: white;
        font-size: 2.25rem;
        text-align: center;
        font-family: var(--font-heading);
        font-weight: 400;
        font-style: italic;
        /* display: block; */
    }

    /* Product collection */
    .collection-product-display {
        width: 100%;
        height: 100%;
        display: flex;
        flex-direction: column;
    }

    /* Product grid */
    .product-grid {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        justify-content: center;
        min-height: 52rem;
        width: 100%;
    }

    .product-grid.loading:after {
        content: "Loading...";
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-family: var(--font-heading);
        font-size: 1.25rem;
        color: var(--color-text);
    }

    /* Product cards */
    .product-card {
        width: calc(50% - 10px);
        max-width: 18.75rem;
        flex: 0 0 auto;
        display: flex;
        flex-direction: column;
    }

    .product-image-container {
        width: 100%;
        height: 0;
        padding-bottom: 100%;
        position: relative;
        overflow: hidden;
    }

    .product-image {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 1s ease;
    }

    .product-image-container:hover .product-image {
        transform: scale(1.05);
    }

    .product-info {
        width: 100%;
        padding: 0 0.9375rem;
        display: flex;
        flex-direction: column;
        align-items: flex-start;
    }

    .product-title {
        font-size: 1.25rem;
        text-align: left;
        font-family: var(--font-heading);
        color: var(--color-text);
        font-weight: 400;
    }

    .product-price {
        font-weight: 400;
        margin-bottom: 0.5rem;
        text-align: left;
        font-family: var(--font-heading);
        text-decoration: none;
        color: var(--color-text);
    }

    .sale-price {
        color: var(--color-text);
        margin-right: 0.5rem;
    }

    /* Variants */
    .product-variants {
        display: flex;
        gap: 0.5rem;
        margin-top: 0.5rem;
        min-height: 1.75rem;
    }

    .variant-color {
        width: 1.125rem;
        height: 1.125rem;
        border-radius: 50%;
        border: 1px solid #e0e0e0 !important;
        transition: transform 0.2s ease;
        cursor: pointer;
    }

    .variant-color:hover {
        transform: scale(1.1);
    }

    /* Pagination */
    .pagination {
        display: flex;
        justify-content: flex-end;
        margin-right: 3.3rem;
        margin-top: 1.5rem;
    }

    .pagination .prev,
    .pagination .next {
        padding: 0.5rem;
        cursor: pointer;
    }

    .pagination .grayed-out {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .pagination-link:hover svg path {
        stroke: var(--color-accent);
    }

    /* Mobile styles */
    @media (max-width: 768px) {

        /* Switch to single column grid on mobile */
        .category-grid {
            display: block;
        }

        .category-item {
            width: 50%;
            height: 50vh;
            float: left;
        }

        .collection-display-row,
        .collection-display-row.reverse {
            width: 100%;
            display: block;
            clear: both;
        }

        .collection-banner {
            width: 100%;
            height: 60vh;
            display: block;
        }

        .product-display {
            width: 100%;
            height: auto;
            min-height: auto;
            padding: 2rem 1rem 3rem;
            display: block;
        }

        .product-grid {
            min-height: 10vh;
        }

        /* Hide pagination on mobile and use swiper instead */
        .pagination {
            display: none;
        }

        /* Swiper styles */
        .swiper-container {
            width: 100%;
            overflow: visible;
        }

        .swiper-slide {
            width: 80%;
            padding: 0 5px;
        }

        .swiper-button-next,
        .swiper-button-prev {
            color: var(--color-text);
            background: rgba(255, 255, 255, 0.8);
            width: 35px;
            height: 35px;
            border-radius: 50%;
        }

        .swiper-button-next:after,
        .swiper-button-prev:after {
            font-size: 18px;
        }
    }

    /* Additional mobile adjustments */
    @media (max-width: 576px) {
        .category-item {
            height: 50vh;
        }

        .collection-banner {
            height: 50vh;
        }

        .category-title,
        .collection-title,
        .collection-subtitle {
            font-size: 1.75rem;
        }

        .swiper-slide {
            width: 80%;
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Initialize the pagination functionality for all product grids
        const productGrids = document.querySelectorAll('.product-grid');
        productGrids.forEach(grid => {
            const blockId = grid.id.split('-').pop();
            initPagination(blockId);
        });

        // Initialize product variants
        initProductVariants();

        // Initialize Swiper on mobile
        initMobileSwiper();

        function initPagination(blockId) {
            // Add event listeners to all pagination links for this block
            const paginationLinks = document.querySelectorAll(`.pagination-link[data-block-id="${blockId}"]`);
            paginationLinks.forEach(function (link) {
                link.addEventListener('click', handlePaginationClick);
            });
        }

        function handlePaginationClick(e) {
            e.preventDefault();

            const url = this.getAttribute('href');
            const blockId = this.getAttribute('data-block-id');
            loadPage(url, blockId);

            // Update URL without refreshing (optional but helps with browser history)
            window.history.pushState({ path: url, blockId: blockId }, '', url);
        }

        function loadPage(url, blockId) {
            // Remember scroll position
            const currentScrollPosition = window.pageYOffset || document.documentElement.scrollTop;

            // Add a loading indicator if you want
            const productGrid = document.getElementById(`product-grid-${blockId}`);
            if (productGrid) {
                productGrid.classList.add('loading');

                // Fetch the new page content
                fetch(url)
                    .then(response => response.text())
                    .then(html => {
                        // Create a temporary element to parse the HTML
                        const parser = new DOMParser();
                        const doc = parser.parseFromString(html, 'text/html');

                        // Find the product grid in the fetched content
                        const newProductGrid = doc.querySelector(`#product-grid-${blockId}`);
                        const newPagination = doc.querySelector(`#pagination-container-${blockId}`);

                        // Replace the existing product grid with the new one
                        if (newProductGrid) {
                            productGrid.innerHTML = newProductGrid.innerHTML;
                            productGrid.classList.remove('loading');

                            // Re-initialize product variants for the new content
                            initProductVariants();

                            // Reinitialize Swiper if on mobile
                            if (window.innerWidth <= 768) {
                                initMobileSwiper();
                            }
                        }

                        // Replace the pagination
                        if (newPagination) {
                            const paginationContainer = document.getElementById(`pagination-container-${blockId}`);
                            if (paginationContainer) {
                                paginationContainer.innerHTML = newPagination.innerHTML;

                                // Re-add event listeners to the new pagination links
                                initPagination(blockId);
                            }
                        }

                        // Maintain the scroll position
                        window.scrollTo(0, currentScrollPosition);
                    })
                    .catch(error => {
                        console.error('Error loading the products:', error);
                        productGrid.classList.remove('loading');
                    });
            }
        }

        // Handle browser back/forward navigation
        window.addEventListener('popstate', function (e) {
            if (e.state && e.state.path) {
                const blockId = e.state.blockId || '';
                loadPage(e.state.path, blockId);
            } else {
                // If no state, reload current page
                window.location.reload();
            }
        });

        // Extract this functionality into its own function that can be called after each page load
        function initProductVariants() {
            // Add CSS for the enhanced radio button styles
            if (!document.getElementById('variant-styles')) {
                const styleElement = document.createElement('style');
                styleElement.id = 'variant-styles';
                styleElement.textContent = `
                .variant-radio-container {
                    position: relative;
                    margin-right: 5px;
                    cursor: pointer;
                }
                .variant-color {
                    width: 18px;
                    height: 18px;
                    border-radius: 50%;
                    display: inline-block;
                    transition: all 0.2s ease;
                    border: none; /* Remove default border */
                }
                .variant-radio:checked + .variant-color {
                    box-shadow: 0 0 0 3px #F6F4F3), rgba(246, 244, 243, 1);
                }
                .variant-radio-container:hover .variant-color {
                    transform: scale(1.1);
                }
            `;
                document.head.appendChild(styleElement);
            }

            // Get all product cards
            const productCards = document.querySelectorAll('.product-card');

            // For each product card
            productCards.forEach(function (card) {
                const variantsContainer = card.querySelector('.product-variants');
                if (!variantsContainer) return;

                // Clear existing variant colors
                variantsContainer.innerHTML = '';

                const imageContainer = card.querySelector('.product-image-container');
                const productLink = card.querySelector('a[href*="/products/"]');
                const productImage = imageContainer ? imageContainer.querySelector('img') : null;

                if (!productLink || !productImage) return;

                // Extract product URL and handle
                const productUrl = productLink.getAttribute('href');
                const productHandle = productUrl.split('/products/')[1].split('?')[0];

                // Store original image
                const originalSrc = productImage.src;
                productImage.setAttribute('data-original-src', originalSrc);

                // Fetch product data using Shopify's product JSON endpoint
                fetch(`/products/${productHandle}.js`)
                    .then(response => response.json())
                    .then(product => {
                        // Get the material option if it exists
                        const materialOptionIndex = product.options.findIndex(option =>
                            option.name.toLowerCase() === 'material' ||
                            option.name.toLowerCase() === 'color'
                        );

                        if (materialOptionIndex === -1) return;

                        const materialValues = product.options[materialOptionIndex].values;
                        const variantImages = {};

                        // Store all variant IDs associated with each material option
                        const variantIds = {};

                        // Create a mapping of variant values to images
                        product.variants.forEach(variant => {
                            const optionValue = variant.options[materialOptionIndex];
                            if (variant.featured_image) {
                                variantImages[optionValue] = variant.featured_image.src;
                            }
                            // Store the variant ID for each material option
                            variantIds[optionValue] = variant.id;
                        });

                        // Create radio buttons for each material option
                        materialValues.forEach((material, index) => {
                            const colorCode = getColorCodeForMaterial(material);
                            const variantId = variantIds[material];

                            const radioContainer = document.createElement('label');
                            radioContainer.className = 'variant-radio-container';

                            const radio = document.createElement('input');
                            radio.type = 'radio';
                            radio.name = `variant-${productHandle}`;
                            radio.value = material;
                            radio.className = 'variant-radio';
                            radio.style.display = 'none';
                            radio.setAttribute('data-variant-id', variantId);
                            radio.setAttribute('aria-label', material);

                            // Check the Gold option by default, or the first option if Gold isn't available
                            if ((material.toLowerCase().includes('gold') && !material.toLowerCase().includes('rose')) ||
                                (index === 0 && !materialValues.some(m => m.toLowerCase().includes('gold') && !m.toLowerCase().includes('rose')))) {
                                radio.checked = true;
                                // Set the initial image to the selected variant
                                if (variantImages[material]) {
                                    productImage.src = variantImages[material];
                                }
                            }

                            const colorDisplay = document.createElement('span');
                            colorDisplay.className = 'variant-color';
                            colorDisplay.style.backgroundColor = colorCode;
                            colorDisplay.title = material;

                            radioContainer.appendChild(radio);
                            radioContainer.appendChild(colorDisplay);
                            variantsContainer.appendChild(radioContainer);

                            // Add event listener to change the image when a radio button is selected
                            radio.addEventListener('change', function () {
                                if (this.checked) {
                                    if (variantImages[material]) {
                                        // Use variant image if available
                                        productImage.src = variantImages[material];
                                    } else if (index === 0) {
                                        // If this is the first option and no image, use original
                                        productImage.src = originalSrc;
                                    } else {
                                        // Create a simple SVG placeholder with the product title as text
                                        const productTitle = card.querySelector('.product-title').textContent;
                                        const svgPlaceholder = `
                                            <svg xmlns="http://www.w3.org/2000/svg" width="600" height="600" viewBox="0 0 600 600">
                                                <rect width="100%" height="100%" fill="#f8f8f8"/>
                                                <text x="50%" y="50%" font-family="serif" font-size="32" text-anchor="middle" fill="#999">
                                                    ${productTitle}
                                                </text>
                                                <text x="50%" y="55%" font-family="serif" font-size="20" text-anchor="middle" fill="#999">
                                                    ${material}
                                                </text>
                                            </svg>`;

                                        // Convert SVG to a data URL
                                        const encodedSvg = encodeURIComponent(svgPlaceholder);
                                        productImage.src = `data:image/svg+xml,${encodedSvg}`;
                                    }
                                }
                            });
                        });
                    })
                    .catch(error => {
                        console.error('Error fetching product data:', error);
                    });
            });
        }

        // Helper function to get color code based on material name
        function getColorCodeForMaterial(material) {
            const lowerMaterial = material.toLowerCase();
            if (lowerMaterial.includes('gold') && !lowerMaterial.includes('rose')) {
                return "#E5D295";  // Gold
            } else if (lowerMaterial.includes('silver') || lowerMaterial.includes('sterling')) {
                return "#CDCCCC";  // Silver
            } else if (lowerMaterial.includes('rose') || lowerMaterial.includes('rosegold')) {
                return "#B76E79";  // Rose Gold
            } else if (lowerMaterial.includes('platinum')) {
                return "#E5E4E2";  // Platinum
            } else {
                // Default dark color
                return "#373736";
            }
        }

        // Initialize Swiper for mobile devices
        function initMobileSwiper() {
            if (window.innerWidth <= 768) {
                const productGrids = document.querySelectorAll('.product-grid');

                productGrids.forEach(productGrid => {
                    if (!productGrid || productGrid.classList.contains('swiper-initialized')) return;

                    // Get all product cards
                    const productCards = productGrid.querySelectorAll('.product-card');
                    if (productCards.length === 0) return;

                    // Create Swiper structure
                    const swiperContainer = document.createElement('div');
                    swiperContainer.className = 'swiper-container';

                    const swiperWrapper = document.createElement('div');
                    swiperWrapper.className = 'swiper-wrapper';

                    // Move all products into the swiper
                    productCards.forEach(card => {
                        const swiperSlide = document.createElement('div');
                        swiperSlide.className = 'swiper-slide';
                        swiperSlide.appendChild(card.cloneNode(true));
                        swiperWrapper.appendChild(swiperSlide);
                    });

                    // Build the swiper structure
                    swiperContainer.appendChild(swiperWrapper);

                    // Add navigation
                    const prevButton = document.createElement('div');
                    prevButton.className = 'swiper-button-prev';

                    const nextButton = document.createElement('div');
                    nextButton.className = 'swiper-button-next';

                    swiperContainer.appendChild(prevButton);
                    swiperContainer.appendChild(nextButton);

                    // Clear the original grid and append the swiper
                    productGrid.innerHTML = '';
                    productGrid.appendChild(swiperContainer);
                    productGrid.classList.add('swiper-initialized');

                    // Initialize Swiper
                    new Swiper(swiperContainer, {
                        slidesPerView: 'auto',
                        spaceBetween: 10,
                        centeredSlides: false,
                        grabCursor: true,
                        navigation: {
                            nextEl: '.swiper-button-next',
                            prevEl: '.swiper-button-prev',
                        },
                        breakpoints: {
                            320: {
                                slidesPerView: 1.3,
                                spaceBetween: 10,
                            },
                            480: {
                                slidesPerView: 2,
                                spaceBetween: 15,
                            }
                        }
                    });
                });

                // Re-initialize product variants
                initProductVariants();
            }
        }
    });
</script>

{% schema %}
{
"name": "Categories Section",
"settings": [],
"blocks": [
{
"type": "category_row",
"name": "Category Block",
"settings": [

{
"type": "select",
"id": "text_color",
"label": "Text Color",
"options": [
{
"value": "white",
"label": "White"
},
{
"value": "black",
"label": "Black"
}
],
"default": "white"
},
{
"type": "text",
"id": "category_title",
"label": "Category Title",
"default": "Category"
},
{
"type": "image_picker",
"id": "category_image",
"label": "Category Image",
"info": "Upload an image for this category."
},
{
"type": "collection",
"id": "collection",
"label": "Collection",
"info": "Select a collection for this category block."
},
{
"type": "text",
"id": "collection_handle",
"label": "Collection Handle (fallback)",
"info": "Used if no collection is selected above. Example: earrings, rings, etc.",
"default": "all"
}
]
},
{
"type": "collection_display",
"name": "Collection with Products",
"settings": [
{
"type": "select",
"id": "layout_direction",
"label": "Layout Direction",
"options": [
{
"value": "banner-left",
"label": "Banner Left, Products Right"
},
{
"value": "banner-right",
"label": "Banner Right, Products Left"
}
],
"default": "banner-left"
},
{
"type": "select",
"id": "text_color",
"label": "Collection Banner Text Color",
"options": [
{
"value": "white",
"label": "White"
},
{
"value": "black",
"label": "Black"
}
],
"default": "white"
},
{
"type": "collection",
"id": "selected_collection",
"label": "Select Banner Collection",
"info": "Choose a collection to display on the banner."
},
{
"type": "collection",
"id": "featured_collection",
"label": "Products to Display",
"info": "Choose a collection for the products grid"
},
{
"type": "image_picker",
"id": "collection_banner_image",
"label": "Collection Banner Image",
"info": "Upload a custom image for the collection banner. If left blank, the collection's featured image will be used."
}
]
}
],
"presets": [
{
"name": "Categories Grid",
"blocks": [
{
"type": "category_row",
"settings": {
"category_title": "Earrings",
"collection_handle": "earrings"
}
},
{
"type": "category_row",
"settings": {
"category_title": "Rings",
"collection_handle": "rings"
}
},
{
"type": "category_row",
"settings": {
"category_title": "Necklaces",
"collection_handle": "necklaces"
}
},
{
"type": "category_row",
"settings": {
"category_title": "Bracelets",
"collection_handle": "bracelets"
}
},
{
"type": "collection_display"
},
{
"type": "category_row",
"settings": {
"category_title": "Personalization",
"collection_handle": "personalization"
}
},
{
"type": "category_row",
"settings": {
"category_title": "Charms",
"collection_handle": "charms"
}
}
]
}
]
}
{% endschema %}