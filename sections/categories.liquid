<div class="categories-section">
  <div class="category-grid">
    {% for block in section.blocks %}
      {% case block.type %}
        {% when 'category_row' %}
          <div class="category-item" {{ block.shopify_attributes }}>
            <a href="{% if block.settings.collection != blank %}{{ block.settings.collection.url }}{% else %}{{ routes.collections_url }}/{{ block.settings.collection_handle }}{% endif %}" class="category-link">
              <div class="category-image-container">
                <div class="category-image category-image-{{ block.id }}"></div>
                <h3 class="category-title" style="color: {% if block.settings.text_color == 'black' %}#373736{% else %}white{% endif %};">
                  {{ block.settings.category_title }}</h3>
              </div>
            </a>
          </div>
        {% when 'collection_display' %}
          <div class="collection-display-row {% if block.settings.layout_direction == 'banner-right' %}reverse{% endif %}" {{ block.shopify_attributes }}>
            <!-- Collection Banner -->
            <div class="collection-banner">
              <a href="{{ block.settings.selected_collection.url }}" class="collection-banner-link">
                <div class="category-image-container">
                  <div class="category-image collection-banner-{{ block.id }}"></div>
                  <h3 class="collection-dynamic-title" style="color: {% if block.settings.text_color == 'black' %}#373736{% else %}white{% endif %};">
                    {{ block.settings.selected_collection.title }}<span class="collection-subtitle" style="color: {% if block.settings.text_color == 'black' %}#373736{% else %}white{% endif %};">
                      Collection</span>
                  </h3>
                </div>
              </a>
            </div>

            <!-- Product Collection Display -->
            <div class="product-display">
              <div class="collection-product-display">
                {% if block.settings.featured_collection != blank %}
                  {% assign collection = collections[block.settings.featured_collection] %}
                  {% if collection.products.size > 0 %}
                    <div class="product-grid" id="product-grid-{{ block.id }}">
                      {% for product in collection.products limit: 4 %}
                        <div class="product-card">
                          <a href="{{ product.url }}">
                            <div class="product-image-container">
                              {% if product.featured_image != blank %}
                                <img
                                  class="product-image"
                                  src="{{ product.featured_image | img_url: 'master' }}"
                                  alt="{{ product.title | escape }}"
                                  width="600"
                                  height="600">
                              {% else %}
                                {{ 'product-1' | placeholder_svg_tag: 'product-image' }}
                              {% endif %}
                            </div>
                          </a>
                          <div class="product-info">
                            <a href="{{ product.url }}">
                              <h3 class="product-title">{{ product.title }}</h3>
                            </a>

                            {% if product.variants.size > 1 and product.options_by_name['Material'] != blank %}
                              <div class="product-variants">
                                {% assign material_option = product.options_by_name['Material'] %}
                                {% for value in material_option.values limit: 4 %}
                                  {% assign color_code = "" %}
                                  {% if value contains 'Gold' %}
                                    {% assign color_code = "#E5D295" %}
                                  {% elsif value contains 'Silver' %}
                                    {% assign color_code = "#CDCCCC" %}
                                  {% elsif value contains 'Rose Gold' %}
                                    {% assign color_code = "#B76E79" %}
                                  {% elsif value contains 'Platinum' %}
                                    {% assign color_code = "#BCBCBC" %}
                                  {% elsif value contains 'Stainless Steel' %}
                                    {% assign color_code = "#E4E4E4" %}
                                  {% endif %}

                                  {% if color_code != "" %}
                                    <div
                                      class="variant-color"
                                      style="background-color: {{ color_code }};"
                                      title="{{ value }}"></div>
                                  {% endif %}
                                {% endfor %}
                              </div>
                            {% endif %}
                          </div>
                        </div>
                      {% endfor %}
                    </div>
                  {% else %}
                    <p class="no-products-message">No products found in this collection</p>
                  {% endif %}
                {% else %}
                  <p class="no-collection-message">Please select a collection in the theme editor</p>
                {% endif %}
              </div>
            </div>
          </div>
      {% endcase %}
    {% endfor %}
  </div>
</div>

<!-- Dynamic CSS for background images with mobile support -->
<style>
  {% for block in section.blocks %}
    {% case block.type %}
    {% when 'category_row' %}
    .category-image-{{ block.id }} {
      background-image: url('{% if block.settings.category_image %}{{ block.settings.category_image | img_url: 'master' }}{% else %}{{ block.settings.collection_handle | append: '-category.png' | asset_url }}{% endif %}');
      background-size: cover;
      background-position: center;
    }

    @media (max-width: 768px) {
      .category-image-{{ block.id }} {
        background-image: url('{% if block.settings.category_mobile_image %}{{ block.settings.category_mobile_image | img_url: 'master' }}{% elsif block.settings.category_image %}{{ block.settings.category_image | img_url: 'master' }}{% else %}{{ block.settings.collection_handle | append: '-category.png' | asset_url }}{% endif %}');
      }
    }

  {% when 'collection_display' %}
  .collection-banner-{{ block.id }} {
    background-image: url('{% if block.settings.collection_banner_image %}{{ block.settings.collection_banner_image | img_url: 'master' }}{% elsif block.settings.selected_collection.featured_image %}{{ block.settings.selected_collection.featured_image | img_url: 'master' }}{% endif %}');
    background-size: cover;
    background-position: center;
  }

  @media (max-width: 768px) {
    .collection-banner-{{ block.id }} {
      background-image: url('{% if block.settings.collection_banner_mobile_image %}{{ block.settings.collection_banner_mobile_image | img_url: 'master' }}{% elsif block.settings.collection_banner_image %}{{ block.settings.collection_banner_image | img_url: 'master' }}{% elsif block.settings.selected_collection.featured_image %}{{ block.settings.selected_collection.featured_image | img_url: 'master' }}{% endif %}');
    }
  }
{% endcase %}
{% endfor %}
</style>

<!-- Swiper JS and CSS for mobile -->
<link rel="stylesheet" href="https://unpkg.com/swiper/swiper-bundle.min.css" />
<script src="https://unpkg.com/swiper/swiper-bundle.min.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Initialize product variants
        initProductVariants();

        // Initialize Swiper on mobile
        initMobileSwiper();

        // Extract this functionality into its own function that can be called after each page load
        function initProductVariants() {
            // Add CSS for the enhanced radio button styles
            if (!document.getElementById('variant-styles')) {
                const styleElement = document.createElement('style');
                styleElement.id = 'variant-styles';
                styleElement.textContent = `
                .variant-radio-container {
                    position: relative;
                    margin-right: 5px;
                    cursor: pointer;
                }
                .variant-color {
                    width: 18px;
                    height: 18px;
                    border-radius: 50%;
                    display: inline-block;
                    transition: all 0.2s ease;
                    border: none; /* Remove default border */
                }
                .variant-radio:checked + .variant-color {
                    box-shadow: 0 0 0 3px #F6F4F3;
                }
                .variant-radio-container:hover .variant-color {
                    transform: scale(1.1);
                }
            `;
                document.head.appendChild(styleElement);
            }

            // Get all product cards
            const productCards = document.querySelectorAll('.product-card');

            // For each product card
            productCards.forEach(function (card) {
                const variantsContainer = card.querySelector('.product-variants');
                if (!variantsContainer) return;

                // Clear existing variant colors
                variantsContainer.innerHTML = '';

                const imageContainer = card.querySelector('.product-image-container');
                const productLink = card.querySelector('a[href*="/products/"]');
                const productImage = imageContainer ? imageContainer.querySelector('img') : null;

                if (!productLink || !productImage) return;

                // Extract product URL and handle
                const productUrl = productLink.getAttribute('href');
                const productHandle = productUrl.split('/products/')[1].split('?')[0];

                // Store original image
                const originalSrc = productImage.src;
                productImage.setAttribute('data-original-src', originalSrc);

                // Fetch product data using Shopify's product JSON endpoint
                fetch(`/products/${productHandle}.js`)
                    .then(response => response.json())
                    .then(product => {
                        // Get the material option if it exists
                        const materialOptionIndex = product.options.findIndex(option =>
                            option.name.toLowerCase() === 'material' ||
                            option.name.toLowerCase() === 'color'
                        );

                        if (materialOptionIndex === -1) return;

                        const materialValues = product.options[materialOptionIndex].values;
                        const variantImages = {};

                        // Store all variant IDs associated with each material option
                        const variantIds = {};

                        // Create a mapping of variant values to images
                        product.variants.forEach(variant => {
                            const optionValue = variant.options[materialOptionIndex];
                            if (variant.featured_image) {
                                variantImages[optionValue] = variant.featured_image.src;
                            }
                            // Store the variant ID for each material option
                            variantIds[optionValue] = variant.id;
                        });

                        // Create radio buttons for each material option
                        materialValues.forEach((material, index) => {
                            const colorCode = getColorCodeForMaterial(material);
                            const variantId = variantIds[material];

                            const radioContainer = document.createElement('label');
                            radioContainer.className = 'variant-radio-container';

                            const radio = document.createElement('input');
                            radio.type = 'radio';
                            radio.name = `variant-${productHandle}`;
                            radio.value = material;
                            radio.className = 'variant-radio';
                            radio.style.display = 'none';
                            radio.setAttribute('data-variant-id', variantId);
                            radio.setAttribute('aria-label', material);

                            // Check the Gold option by default, or the first option if Gold isn't available
                            if ((material.toLowerCase().includes('gold') && !material.toLowerCase().includes('rose')) ||
                                (index === 0 && !materialValues.some(m => m.toLowerCase().includes('gold') && !m.toLowerCase().includes('rose')))) {
                                radio.checked = true;
                                // Set the initial image to the selected variant
                                if (variantImages[material]) {
                                    productImage.src = variantImages[material];
                                }
                            }

                            const colorDisplay = document.createElement('span');
                            colorDisplay.className = 'variant-color';
                            colorDisplay.style.backgroundColor = colorCode;
                            colorDisplay.title = material;

                            radioContainer.appendChild(radio);
                            radioContainer.appendChild(colorDisplay);
                            variantsContainer.appendChild(radioContainer);

                            // Add event listener to change the image when a radio button is selected
                            radio.addEventListener('change', function () {
                                if (this.checked) {
                                    if (variantImages[material]) {
                                        // Use variant image if available
                                        productImage.src = variantImages[material];
                                    } else if (index === 0) {
                                        // If this is the first option and no image, use original
                                        productImage.src = originalSrc;
                                    } else {
                                        // Create a simple SVG placeholder with the product title as text
                                        const productTitle = card.querySelector('.product-title').textContent;
                                        const svgPlaceholder = `
                                            <svg xmlns="http://www.w3.org/2000/svg" width="600" height="600" viewBox="0 0 600 600">
                                                <rect width="100%" height="100%" fill="#f8f8f8"/>
                                                <text x="50%" y="50%" font-family="serif" font-size="32" text-anchor="middle" fill="#999">
                                                    ${productTitle}
                                                </text>
                                                <text x="50%" y="55%" font-family="serif" font-size="20" text-anchor="middle" fill="#999">
                                                    ${material}
                                                </text>
                                            </svg>`;

                                        // Convert SVG to a data URL
                                        const encodedSvg = encodeURIComponent(svgPlaceholder);
                                        productImage.src = `data:image/svg+xml,${encodedSvg}`;
                                    }
                                }
                            });
                        });
                    })
                    .catch(error => {
                        console.error('Error fetching product data:', error);
                    });
            });
        }

        // Helper function to get color code based on material name
        function getColorCodeForMaterial(material) {
            const lowerMaterial = material.toLowerCase();
            if (lowerMaterial.includes('gold') && !lowerMaterial.includes('rose')) {
                return "#E5D295";  // Gold
            } else if (lowerMaterial.includes('silver') || lowerMaterial.includes('sterling')) {
                return "#CDCCCC";  // Silver
            } else if (lowerMaterial.includes('rose') || lowerMaterial.includes('rosegold')) {
                return "#B76E79";  // Rose Gold
            } else if (lowerMaterial.includes('platinum')) {
                return "#E5E4E2";  // Platinum
            } else {
                // Default dark color
                return "#373736";
            }
        }

        // Initialize Swiper for mobile devices
        function initMobileSwiper() {
            if (window.innerWidth <= 768) {
                const productGrids = document.querySelectorAll('.product-grid');

                productGrids.forEach(productGrid => {
                    if (!productGrid || productGrid.classList.contains('swiper-initialized')) return;

                    // Get all product cards
                    const productCards = productGrid.querySelectorAll('.product-card');
                    if (productCards.length === 0) return;

                    // Create Swiper structure
                    const swiperContainer = document.createElement('div');
                    swiperContainer.className = 'swiper-container';

                    const swiperWrapper = document.createElement('div');
                    swiperWrapper.className = 'swiper-wrapper';

                    // Move all products into the swiper
                    productCards.forEach(card => {
                        const swiperSlide = document.createElement('div');
                        swiperSlide.className = 'swiper-slide';
                        swiperSlide.appendChild(card.cloneNode(true));
                        swiperWrapper.appendChild(swiperSlide);
                    });

                    // Build the swiper structure
                    swiperContainer.appendChild(swiperWrapper);

                    // Create pagination container for mobile
                    const paginationContainer = document.createElement('div');
                    paginationContainer.className = 'swiper-pagination';
                    swiperContainer.appendChild(paginationContainer);

                    // Clear the original grid and append the swiper
                    productGrid.innerHTML = '';
                    productGrid.appendChild(swiperContainer);
                    productGrid.classList.add('swiper-initialized');

                    // Initialize Swiper with pagination
                    new Swiper(swiperContainer, {
                        slidesPerView: 'auto',
                        spaceBetween: 10,
                        centeredSlides: false,
                        grabCursor: true,
                        pagination: {
                            el: '.swiper-pagination',
                            clickable: true,
                            bulletClass: 'swiper-pagination-bullet',
                            bulletActiveClass: 'swiper-pagination-bullet-active'
                        },
                        breakpoints: {
                            320: {
                                slidesPerView: 1.3,
                                spaceBetween: 10,
                            },
                            480: {
                                slidesPerView: 2,
                                spaceBetween: 15,
                            }
                        }
                    });
                });

                // Re-initialize product variants
                initProductVariants();
            }
        }
    });
</script>

{% schema %}
  {
    "name": "Categories Section",
    "settings": [],
    "blocks": [
      {
        "type": "category_row",
        "name": "Category Block",
        "settings": [

          {
            "type": "select",
            "id": "text_color",
            "label": "Text Color",
            "options": [
              {
                "value": "white",
                "label": "White"
              }, {
                "value": "black",
                "label": "Black"
              }
            ],
            "default": "white"
          },
          {
            "type": "text",
            "id": "category_title",
            "label": "Category Title",
            "default": "Category"
          },
          {
            "type": "image_picker",
            "id": "category_image",
            "label": "Category Image",
            "info": "Upload an image for this category."
          },
          {
            "type": "image_picker",
            "id": "category_mobile_image",
            "label": "Mobile Category Image",
            "info": "Optional. If not provided, desktop image will be used on mobile devices."
          }, {
            "type": "collection",
            "id": "collection",
            "label": "Collection",
            "info": "Select a collection for this category block."
          }, {
            "type": "text",
            "id": "collection_handle",
            "label": "Collection Handle (fallback)",
            "info": "Used if no collection is selected above. Example: earrings, rings, etc.",
            "default": "all"
          }
        ]
      }, {
        "type": "collection_display",
        "name": "Collection with Products",
        "settings": [
          {
            "type": "text",
            "id": "custom_collection_title",
            "label": "Custom Collection Title",
            "info": "Leave blank to use the selected collection's title"
          },
          {
            "type": "select",
            "id": "layout_direction",
            "label": "Layout Direction",
            "options": [
              {
                "value": "banner-left",
                "label": "Banner Left, Products Right"
              }, {
                "value": "banner-right",
                "label": "Banner Right, Products Left"
              }
            ],
            "default": "banner-left"
          },
          {
            "type": "select",
            "id": "text_color",
            "label": "Collection Banner Text Color",
            "options": [
              {
                "value": "white",
                "label": "White"
              }, {
                "value": "black",
                "label": "Black"
              }
            ],
            "default": "white"
          },
          {
            "type": "collection",
            "id": "selected_collection",
            "label": "Select Banner Collection",
            "info": "Choose a collection to display on the banner."
          }, {
            "type": "collection",
            "id": "featured_collection",
            "label": "Products to Display",
            "info": "Choose a collection for the products grid"
          }, {
            "type": "image_picker",
            "id": "collection_banner_image",
            "label": "Collection Banner Image",
            "info": "Upload a custom image for the collection banner. If left blank, the collection's featured image will be used."
          }, {
            "type": "image_picker",
            "id": "collection_banner_mobile_image",
            "label": "Mobile Collection Banner Image",
            "info": "Optional. If not provided, desktop banner image will be used on mobile devices."
          }
        ]
      }
    ],
    "presets": [
      {
        "name": "Categories Grid",
        "blocks": [
          {
            "type": "category_row",
            "settings": {
              "category_title": "Earrings",
              "collection_handle": "earrings"
            }
          },
          {
            "type": "category_row",
            "settings": {
              "category_title": "Rings",
              "collection_handle": "rings"
            }
          },
          {
            "type": "category_row",
            "settings": {
              "category_title": "Necklaces",
              "collection_handle": "necklaces"
            }
          },
          {
            "type": "category_row",
            "settings": {
              "category_title": "Bracelets",
              "collection_handle": "bracelets"
            }
          }, {
            "type": "collection_display"
          }, {
            "type": "category_row",
            "settings": {
              "category_title": "Personalization",
              "collection_handle": "personalization"
            }
          }, {
            "type": "category_row",
            "settings": {
              "category_title": "Charms",
              "collection_handle": "charms"
            }
          }
        ]
      }
    ]
  }
{% endschema %}