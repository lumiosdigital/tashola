<!-- sections/product-display.liquid -->
<div class="product-display">
    <div class="product-display-header">
        {% if section.settings.show_description and section.settings.selected_collection.description != blank %}
        <div class="product-display-description">{{ section.settings.selected_collection.description }}</div>
        {% endif %}
    </div>

    {% if section.settings.selected_collection != blank %}
    {% assign collection = collections[section.settings.selected_collection] %}

    {% paginate collection.products by 4 %}
    <div class="pd-products-grid" id="pd-products-grid">
        {% for product in collection.products %}
        <div class="pd-product-card">
            <a href="{{ product.url }}">
                <div class="pd-product-image-container">
                    {% if product.featured_image != blank %}
                    <img class="pd-product-image"
                        src="{{ product.featured_image | img_url: '600x600', crop: 'center' }}"
                        alt="{{ product.title | escape }}" loading="lazy" width="600" height="600">
                    {% else %}
                    {{ 'product-1' | placeholder_svg_tag: 'pd-product-image' }}
                    {% endif %}
                </div>
            </a>
            <div class="pd-product-info">
                <a href="{{ product.url }}">
                    <h3 class="pd-product-title">{{ product.title }}</h3>
                    <div class="pd-product-price">
                        {% if product.compare_at_price > product.price %}
                        <span class="pd-sale-price">{{ product.price | money }}</span>
                        <s>{{ product.compare_at_price | money }}</s>
                        {% else %}
                        <span>{{ product.price | money }}</span>
                        {% endif %}
                    </div>
                </a>

                {% if product.variants.size > 1 and product.options_by_name['Metal'] != blank %}
                <div class="pd-product-variants">
                    {% assign metal_option = product.options_by_name['Metal'] %}
                    {% for value in metal_option.values limit: 4 %}
                    {% assign color_code = "" %}
                    {% if value contains 'Gold' %}
                    {% assign color_code = "#E5D295" %}
                    {% elsif value contains 'Silver' %}
                    {% assign color_code = "#CDCCCC" %}
                    {% elsif value contains 'Rose Gold' %}
                    {% assign color_code = "#B76E79" %}
                    {% elsif value contains 'Platinum' %}
                    {% assign color_code = "#BCBCBC" %}
                    {% elsif value contains 'Stainless Steel' %}
                    {% assign color_code = "#E4E4E4" %}
                    {% endif %}
                    {% if color_code != "" %}
                    <div class="pd-variant-color" style="background-color: {{ color_code }};" title="{{ value }}">
                    </div>
                    {% endif %}
                    {% endfor %}
                </div>
                {% endif %}
            </div>
        </div>
        {% endfor %}
    </div>

    {% if paginate.pages > 1 %}
    <div class="pd-pagination" id="pd-pagination-container">
        {% if paginate.previous %}
        <a href="{{ paginate.previous.url }}" class="pd-prev pd-pagination-link"
            data-page="{{ paginate.previous.page }}" aria-label="Previous page">
            {% render 'icon-arrow-left' %}
        </a>
        {% else %}
        <div class="pd-prev pd-grayed-out" aria-disabled="true">{% render 'icon-arrow-left-gray' %}</div>
        {% endif %}

        {% if paginate.next %}
        <a href="{{ paginate.next.url }}" class="pd-next pd-pagination-link" data-page="{{ paginate.next.page }}"
            aria-label="Next page">
            {% render 'icon-arrow-right' %}
        </a>
        {% else %}
        <div class="pd-next pd-grayed-out" aria-disabled="true">{% render 'icon-arrow-right-gray' %}</div>
        {% endif %}
    </div>
    {% endif %}
    {% endpaginate %}
    {% else %}
    <p class="pd-no-collection-selected">Please select a collection in the theme editor</p>
    {% endif %}
</div>

<style>
    /* Product display styling */
    .product-display {
        width: 100%;
        padding: 42px 0 75px;
        background-color: #F6F4F3; /* THIS CHANGES THE COLOR OF THE BLOCK'S BACKGROUND */
    }

    .pd-products-grid {
        display: flex;
        justify-items: center;
        justify-content: center;
        gap: 10px;
        padding: 0 3.75rem;
        transition: opacity 0.3s ease;
    }

    .pd-products-grid.loading {
        opacity: 0.6;
        position: relative;
    }

    .pd-products-grid.loading::after {
        content: "Loading...";
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-family: var(--font-heading);
        font-size: 1.25rem;
        color: var(--primary-color);
    }

    .pd-pagination {
        display: flex;
        justify-content: flex-end;
        margin-top: 2rem;
        margin-right: 60px;
        gap: 16px;
    }

    .pd-no-collection-selected {
        text-align: center;
        padding: 2rem;
    }

    /* Product card styling */
    .pd-product-card {
        /* width: 100%; */
        /* max-width: 18.75rem; */
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    .pd-product-image-container {
        width: 23vw;
        height: 60vh;
        padding-bottom: 100%;
        position: relative;
        overflow: hidden;
        margin-bottom: 1rem;
    }

    .pd-product-image {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 1s ease;
    }

    .pd-product-image-container:hover .pd-product-image {
        transform: scale(1.05);
    }

    .pd-product-info {
        width: 100%;
        padding: 0 0.9375rem;
    }

    .pd-product-title {
        font-size: 1.25rem;
        text-align: left;
        font-family: var(--font-heading);
        color: var(--primary-color);
        font-weight: 400;
    }

    .pd-product-price {
        font-size: 1.25rem;
        font-weight: 400;
        margin-bottom: 0.5rem;
        text-align: left;
        font-family: var(--font-heading);
        color: var(--primary-color);
    }

    .pd-sale-price {
        color: var(--primary-color);
        margin-right: 0.5rem;
    }

    .pd-product-price s {
        color: #3737366d;
        font-size: 1rem;
    }

    /* Variant colors styling */
    .pd-variant-color {
        width: 1.125rem;
        height: 1.125rem;
        border-radius: 50%;
        border: 1px solid #e0e0e0;
        transition: transform 0.2s ease;
        cursor: pointer;
        display: inline-block;
        margin-right: 0.5rem;
    }

    .pd-variant-color:hover {
        transform: scale(1.1);
    }

    .pd-variant-color.selected {
        box-shadow: 0 0 0 2px white, 0 0 0 3px var(--primary-color);
        transform: scale(1.1);
    }

    .pd-pagination-link:hover svg path {
        stroke: var(--color-accent);
    }

    .pd-pagination .pd-grayed-out {
    opacity: 0.5;
    cursor: not-allowed;
}

    /* Responsive styles */
    @media (max-width: 992px) {
        .pd-products-grid {
            grid-template-columns: repeat(3, 1fr);
            padding: 0 2rem;
        }
    }

    @media (max-width: 768px) {
    /* Swiper container styling */
        .pd-products-grid {
            display: block;
            width: 100%;
            overflow: visible;
            padding: 0;
        }
        
        .pd-swiper-container {
            overflow: visible;
            width: 100%;
            padding: 0 1rem;
        }
        
        .pd-swiper-slide {
            width: auto;
        }
        
        /* Swiper navigation */
        .pd-swiper-button-next,
        .pd-swiper-button-prev {
            color: var(--primary-color);
            background: rgba(255, 255, 255, 0.8);
            width: 35px;
            height: 35px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .pd-swiper-button-next:after,
        .pd-swiper-button-prev:after {
            font-size: 18px;
        }
        
        /* Hide pagination and replace with Swiper pagination */
        .pd-pagination {
            display: none;
        }
        
        .pd-swiper-pagination {
            position: relative;
            width: 100%;
            text-align: center;
            margin-top: 2rem;
        }
        
        /* Adjust product card sizing */
        .pd-product-image-container {
            width: 100%;
            height: auto;
            aspect-ratio: 1/1;
            padding-bottom: 0;
        }
    }

    /* Reserve space for variant buttons */
    .pd-product-variants {
        min-height: 1.75rem; /* Height of variant buttons plus margin */
        display: flex;
        margin-top: 0.5rem;
    }

    .pd-product-info {
        display: flex;
        flex-direction: column;
        flex: 1;
    }

</style>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Initialize the pagination functionality
        initPDPagination();

        // Initialize product variants
        initPDProductVariants();

        // Initialize mobile Swiper
        initMobileProductDisplaySwiper();

        function initPDPagination() {
            // Add event listeners to all pagination links
            const paginationLinks = document.querySelectorAll('.pd-pagination-link');
            paginationLinks.forEach(function (link) {
                link.addEventListener('click', handlePDPaginationClick);
            });
        }

        function handlePDPaginationClick(e) {
            e.preventDefault();

            const url = this.getAttribute('href');
            loadPDPage(url);

            // Update URL without refreshing
            window.history.pushState({ pdPath: url }, '', url);
        }

        function loadPDPage(url) {
            // Remember scroll position
            const currentScrollPosition = window.pageYOffset || document.documentElement.scrollTop;

            // Add a loading indicator
            const productGrid = document.querySelector('.pd-products-grid');
            if (productGrid) {
                productGrid.classList.add('loading');
            }

            // Fetch the new page content
            fetch(url)
                .then(response => response.text())
                .then(html => {
                    // Create a temporary element to parse the HTML
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');

                    // Find the product grid in the fetched content
                    const newProductGrid = doc.querySelector('.pd-products-grid');
                    const newPagination = doc.querySelector('#pd-pagination-container');

                    // Replace the existing product grid with the new one
                    if (newProductGrid && productGrid) {
                        productGrid.innerHTML = newProductGrid.innerHTML;
                        productGrid.classList.remove('loading');

                        // Re-initialize product variants for the new content
                        initPDProductVariants();

                        // Reinitialize Swiper for mobile
                        if (window.innerWidth <= 768) {
                            initMobileProductDisplaySwiper();
                        }
                    }

                    // Replace the pagination
                    if (newPagination) {
                        const paginationContainer = document.getElementById('pd-pagination-container');
                        if (paginationContainer) {
                            paginationContainer.innerHTML = newPagination.innerHTML;

                            // Re-add event listeners to the new pagination links
                            initPDPagination();
                        }
                    }

                    // Maintain the scroll position
                    window.scrollTo(0, currentScrollPosition);
                })
                .catch(error => {
                    console.error('Error loading the products:', error);
                    if (productGrid) {
                        productGrid.classList.remove('loading');
                    }
                });
        }

        // Handle browser back/forward navigation specifically for this section
        window.addEventListener('popstate', function (e) {
            if (e.state && e.state.pdPath) {
                loadPDPage(e.state.pdPath);
            }
        });

        // Initialize mobile Swiper for product display
        function initMobileProductDisplaySwiper() {
            // Only run on mobile
            if (window.innerWidth > 768) return;

            // Check if Swiper is defined
            if (typeof Swiper === 'undefined') {
                // Load Swiper CSS if not already loaded
                if (!document.querySelector('link[href*="swiper"]')) {
                    const swiperCss = document.createElement('link');
                    swiperCss.rel = 'stylesheet';
                    swiperCss.href = 'https://unpkg.com/swiper/swiper-bundle.min.css';
                    document.head.appendChild(swiperCss);
                }

                // Load Swiper JS if not already loaded
                const swiperScript = document.createElement('script');
                swiperScript.src = 'https://unpkg.com/swiper/swiper-bundle.min.js';
                swiperScript.onload = function () {
                    setupProductSwiper();
                };
                document.head.appendChild(swiperScript);
            } else {
                // Swiper is already loaded, proceed with setup
                setupProductSwiper();
            }
        }

        function setupProductSwiper() {
            const productsGrid = document.querySelector('.pd-products-grid');
            if (!productsGrid) return;

            // Avoid initializing multiple times
            if (productsGrid.classList.contains('swiper-initialized')) return;

            // Get all product cards
            const productCards = productsGrid.querySelectorAll('.pd-product-card');
            if (productCards.length === 0) return;

            // Save the original content to restore it later if needed
            const originalContent = productsGrid.innerHTML;
            productsGrid.setAttribute('data-original-content', originalContent);

            // Clear the grid and create Swiper structure
            productsGrid.innerHTML = '';
            productsGrid.classList.add('swiper-initialized');

            // Create Swiper container
            const swiperContainer = document.createElement('div');
            swiperContainer.className = 'swiper-container pd-swiper';

            // Create Swiper wrapper
            const swiperWrapper = document.createElement('div');
            swiperWrapper.className = 'swiper-wrapper';

            // Add product cards as slides
            productCards.forEach(card => {
                const slide = document.createElement('div');
                slide.className = 'swiper-slide';
                slide.appendChild(card.cloneNode(true));
                swiperWrapper.appendChild(slide);
            });

            // Add pagination
            const pagination = document.createElement('div');
            pagination.className = 'swiper-pagination';

            // Add navigation buttons
            const prevButton = document.createElement('div');
            prevButton.className = 'swiper-button-prev';

            const nextButton = document.createElement('div');
            nextButton.className = 'swiper-button-next';

            // Build Swiper structure
            swiperContainer.appendChild(swiperWrapper);
            swiperContainer.appendChild(pagination);
            swiperContainer.appendChild(prevButton);
            swiperContainer.appendChild(nextButton);

            // Add to the DOM
            productsGrid.appendChild(swiperContainer);

            // Initialize Swiper
            const swiper = new Swiper('.pd-swiper', {
                slidesPerView: 'auto',
                spaceBetween: 15,
                centeredSlides: false,
                loop: false,
                pagination: {
                    el: '.swiper-pagination',
                    clickable: true,
                },
                navigation: {
                    nextEl: '.swiper-button-next',
                    prevEl: '.swiper-button-prev',
                },
                breakpoints: {
                    320: {
                        slidesPerView: 1.3,
                        spaceBetween: 10,
                    },
                    480: {
                        slidesPerView: 1.7,
                        spaceBetween: 15,
                    },
                    576: {
                        slidesPerView: 2.2,
                        spaceBetween: 20,
                    }
                }
            });

            // Re-initialize variants
            initPDProductVariants();
        }

        // Product variants functionality
        function initPDProductVariants() {
            // Add CSS for the enhanced radio button styles
            if (!document.getElementById('pd-variant-styles')) {
                const styleElement = document.createElement('style');
                styleElement.id = 'pd-variant-styles';
                styleElement.textContent = `
                .pd-variant-radio-container {
                    position: relative;
                    margin-right: 5px;
                    cursor: pointer;
                }
                .pd-variant-color {
                    width: 18px;
                    height: 18px;
                    border-radius: 50%;
                    display: inline-block;
                    transition: all 0.2s ease;
                    border: 1px solid #e0e0e0; /* Explicitly set border */
                }
                .pd-variant-radio:checked + .pd-variant-color {
                    box-shadow: 0 0 0 3px rgba(246, 244, 243, 1), 0 0 0 4px rgba(246, 244, 243, 1);
                }
                .pd-variant-radio-container:hover .pd-variant-color {
                    transform: scale(1.1);
                }
                
                /* Swiper specific styles */
                @media (max-width: 768px) {
                    .pd-products-grid {
                        overflow: visible !important;
                        padding: 0 !important;
                    }
                    
                    .swiper-container.pd-swiper {
                        overflow: visible;
                        padding: 0 1rem;
                        margin-left: -1rem;
                        margin-right: -1rem;
                        width: calc(100% + 2rem);
                    }
                    
                    .swiper-slide {
                        height: auto;
                        width: 80%;
                    }
                    
                    .swiper-button-next,
                    .swiper-button-prev {
                        color: var(--primary-color) !important;
                        background: rgba(255, 255, 255, 0.8);
                        width: 35px;
                        height: 35px;
                        border-radius: 50%;
                    }
                    
                    .swiper-button-next:after,
                    .swiper-button-prev:after {
                        font-size: 18px;
                    }
                    
                    .pd-product-image-container {
                        width: 100% !important;
                        height: 0 !important;
                        padding-bottom: 100% !important;
                        position: relative;
                    }
                    
                    .pd-pagination {
                        display: none;
                    }
                }
            `;
                document.head.appendChild(styleElement);
            }

            // Get all product cards
            const productCards = document.querySelectorAll('.pd-product-card');

            // For each product card
            productCards.forEach(function (card) {
                const variantsContainer = card.querySelector('.pd-product-variants');
                if (!variantsContainer) return;

                // Clear existing variant colors
                variantsContainer.innerHTML = '';

                const imageContainer = card.querySelector('.pd-product-image-container');
                const productLink = card.querySelector('a[href*="/products/"]');
                const productImage = imageContainer ? imageContainer.querySelector('img') : null;

                if (!productLink || !productImage) return;

                // Extract product URL and handle
                const productUrl = productLink.getAttribute('href');
                const productHandle = productUrl.split('/products/')[1].split('?')[0];

                // Store original image
                const originalSrc = productImage.src;
                productImage.setAttribute('data-original-src', originalSrc);

                // Fetch product data using Shopify's product JSON endpoint
                fetch(`/products/${productHandle}.js`)
                    .then(response => response.json())
                    .then(product => {
                        // Get the metal option if it exists
                        const metalOptionIndex = product.options.findIndex(option =>
                            option.name.toLowerCase() === 'metal' ||
                            option.name.toLowerCase() === 'color'
                        );

                        if (metalOptionIndex === -1) return;

                        const metalValues = product.options[metalOptionIndex].values;
                        const variantImages = {};

                        // Store all variant IDs associated with each metal option
                        const variantIds = {};

                        // Create a mapping of variant values to images
                        product.variants.forEach(variant => {
                            const optionValue = variant.options[metalOptionIndex];
                            if (variant.featured_image) {
                                variantImages[optionValue] = variant.featured_image.src;
                            }
                            // Store the variant ID for each metal option
                            variantIds[optionValue] = variant.id;
                        });

                        // Create radio buttons for each metal option
                        metalValues.forEach((metal, index) => {
                            const colorCode = getPDColorCodeForMetal(metal);
                            const variantId = variantIds[metal];

                            const radioContainer = document.createElement('label');
                            radioContainer.className = 'pd-variant-radio-container';

                            const radio = document.createElement('input');
                            radio.type = 'radio';
                            radio.name = `pd-variant-${productHandle}`;
                            radio.value = metal;
                            radio.className = 'pd-variant-radio';
                            radio.style.display = 'none';
                            radio.setAttribute('data-variant-id', variantId);

                            // Check the Gold option by default, or the first option if Gold isn't available
                            if ((metal.toLowerCase().includes('gold') && !metal.toLowerCase().includes('rose')) ||
                                (index === 0 && !metalValues.some(m => m.toLowerCase().includes('gold') && !m.toLowerCase().includes('rose')))) {
                                radio.checked = true;
                                // Set the initial image to the selected variant
                                if (variantImages[metal]) {
                                    productImage.src = variantImages[metal];
                                }
                            }

                            const colorDisplay = document.createElement('span');
                            colorDisplay.className = 'pd-variant-color';
                            colorDisplay.style.backgroundColor = colorCode;
                            colorDisplay.title = metal;

                            radioContainer.appendChild(radio);
                            radioContainer.appendChild(colorDisplay);
                            variantsContainer.appendChild(radioContainer);

                            // Add event listener to change the image when a radio button is selected
                            radio.addEventListener('change', function () {
                                if (this.checked) {
                                    if (variantImages[metal]) {
                                        // Use variant image if available
                                        productImage.src = variantImages[metal];
                                    } else if (index === 0) {
                                        // If this is the first option and no image, use original
                                        productImage.src = originalSrc;
                                    } else {
                                        // Create a simple SVG placeholder with the product title as text
                                        const productTitle = card.querySelector('.pd-product-title').textContent;
                                        const svgPlaceholder = `
                                            <svg xmlns="http://www.w3.org/2000/svg" width="600" height="600" viewBox="0 0 600 600">
                                                <rect width="100%" height="100%" fill="#f8f8f8"/>
                                                <text x="50%" y="50%" font-family="serif" font-size="32" text-anchor="middle" fill="#999">
                                                    ${productTitle}
                                                </text>
                                                <text x="50%" y="55%" font-family="serif" font-size="20" text-anchor="middle" fill="#999">
                                                    ${metal}
                                                </text>
                                            </svg>`;

                                        // Convert SVG to a data URL
                                        const encodedSvg = encodeURIComponent(svgPlaceholder);
                                        productImage.src = `data:image/svg+xml,${encodedSvg}`;
                                    }
                                }
                            });
                        });
                    })
                    .catch(error => {
                        console.error('Error fetching product data:', error);
                    });
            });
        }

        // Helper function to get color code based on metal name - specific to this section
        function getPDColorCodeForMetal(metal) {
            const lowerMetal = metal.toLowerCase();
            if (lowerMetal.includes('gold') && !lowerMetal.includes('rose')) {
                return "#E5D295";  // Gold
            } else if (lowerMetal.includes('silver') || lowerMetal.includes('sterling')) {
                return "#CDCCCC";  // Silver
            } else if (lowerMetal.includes('rose') || lowerMetal.includes('rosegold')) {
                return "#B76E79";  // Rose Gold
            } else if (lowerMetal.includes('platinum')) {
                return "#E5E4E2";  // Platinum
            } else {
                return "#373736";  // Default dark color
            }
        }

        // Handle window resize
        window.addEventListener('resize', function () {
            const productsGrid = document.querySelector('.pd-products-grid');
            if (!productsGrid) return;

            // Check if going from mobile to desktop
            if (window.innerWidth > 768 && productsGrid.classList.contains('swiper-initialized')) {
                // Restore original content
                const originalContent = productsGrid.getAttribute('data-original-content');
                if (originalContent) {
                    productsGrid.innerHTML = originalContent;
                    productsGrid.classList.remove('swiper-initialized');
                    initPDProductVariants();
                }
            }
            // Check if going from desktop to mobile
            else if (window.innerWidth <= 768 && !productsGrid.classList.contains('swiper-initialized')) {
                initMobileProductDisplaySwiper();
            }
        });
    });
</script>

{% schema %}
{
"name": "Product Display",
"tag": "section",
"class": "section",
"settings": [
{
"type": "collection",
"id": "selected_collection",
"label": "Collection"
}
],
"presets": [
{
"name": "Product Display",
"category": "Collections"
}
]
}
{% endschema %}