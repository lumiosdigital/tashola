<!-- sections/product-display.liquid -->
<div class="product-display">
    <div class="product-display-header">
        {% if section.settings.show_description and section.settings.selected_collection.description != blank %}
        <div class="product-display-description">{{ section.settings.selected_collection.description }}</div>
        {% endif %}
    </div>

    {% if section.settings.selected_collection != blank %}
    {% assign collection = collections[section.settings.selected_collection] %}

    {% paginate collection.products by 4 %}
    <div class="pd-products-grid" id="pd-products-grid">
        {% for product in collection.products %}
        <div class="pd-product-card">
            <a href="{{ product.url }}">
                <div class="pd-product-image-container">
                    {% if product.featured_image != blank %}
                    <img class="pd-product-image"
                        src="{{ product.featured_image | img_url: '600x600', crop: 'center' }}"
                        alt="{{ product.title | escape }}" loading="lazy" width="600" height="600">
                    {% else %}
                    {{ 'product-1' | placeholder_svg_tag: 'pd-product-image' }}
                    {% endif %}
                </div>
            </a>
            <div class="pd-product-info">
                <a href="{{ product.url }}">
                    <h3 class="pd-product-title">{{ product.title }}</h3>
                    <div class="pd-product-price">
                        {% if product.compare_at_price > product.price %}
                        <span class="pd-sale-price">{{ product.price | money }}</span>
                        <s>{{ product.compare_at_price | money }}</s>
                        {% else %}
                        <span>{{ product.price | money }}</span>
                        {% endif %}
                    </div>
                </a>

                {% if product.variants.size > 1 and product.options_by_name['Metal'] != blank %}
                <div class="pd-product-variants">
                    {% assign metal_option = product.options_by_name['Metal'] %}
                    {% for value in metal_option.values limit: 4 %}
                    {% assign color_code = "" %}
                    {% if value contains 'Gold' %}
                    {% assign color_code = "#E5D295" %}
                    {% elsif value contains 'Silver' %}
                    {% assign color_code = "#CDCCCC" %}
                    {% elsif value contains 'Rose Gold' %}
                    {% assign color_code = "#B76E79" %}
                    {% elsif value contains 'Platinum' %}
                    {% assign color_code = "#BCBCBC" %}
                    {% elsif value contains 'Stainless Steel' %}
                    {% assign color_code = "#E4E4E4" %}
                    {% endif %}
                    {% if color_code != "" %}
                    <div class="pd-variant-color" style="background-color: {{ color_code }};" title="{{ value }}">
                    </div>
                    {% endif %}
                    {% endfor %}
                </div>
                {% endif %}
            </div>
        </div>
        {% endfor %}
    </div>

    {% if paginate.pages > 1 %}
    <div class="pd-pagination" id="pd-pagination-container">
        {% if paginate.previous %}
        <a href="{{ paginate.previous.url }}" class="pd-prev pd-pagination-link"
            data-page="{{ paginate.previous.page }}" aria-label="Previous page">
            {% render 'icon-arrow-left' %}
        </a>
        {% else %}
        <div class="pd-prev pd-grayed-out" aria-disabled="true">{% render 'icon-arrow-left-gray' %}</div>
        {% endif %}

        {% if paginate.next %}
        <a href="{{ paginate.next.url }}" class="pd-next pd-pagination-link" data-page="{{ paginate.next.page }}"
            aria-label="Next page">
            {% render 'icon-arrow-right' %}
        </a>
        {% else %}
        <div class="pd-next pd-grayed-out" aria-disabled="true">{% render 'icon-arrow-right-gray' %}</div>
        {% endif %}
    </div>
    {% endif %}
    {% endpaginate %}
    {% else %}
    <p class="pd-no-collection-selected">Please select a collection in the theme editor</p>
    {% endif %}
</div>

<style>
    /* Product display styling */
    .product-display {
        width: 100%;
        padding: 42px 0 75px;
        background-color: #F6F4F3;
        /* THIS CHANGES THE COLOR OF THE BLOCK'S BACKGROUND */
    }

    .pd-products-grid {
        display: flex;
        justify-items: center;
        justify-content: center;
        gap: 10px;
        padding: 0 3.75rem;
        transition: opacity 0.3s ease;
    }

    .pd-products-grid.loading {
        opacity: 0.6;
        position: relative;
    }

    .pd-products-grid.loading::after {
        content: "Loading...";
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-family: var(--font-heading);
        font-size: 1.25rem;
        color: var(--primary-color);
    }

    .pd-pagination {
        display: flex;
        justify-content: flex-end;
        margin-top: 2rem;
        margin-right: 60px;
        gap: 16px;
    }

    .pd-no-collection-selected {
        text-align: center;
        padding: 2rem;
    }

    /* Product card styling */
    .pd-product-card {
        /* width: 100%; */
        /* max-width: 18.75rem; */
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    .pd-product-image-container {
        width: 23vw;
        height: 60vh;
        padding-bottom: 100%;
        position: relative;
        overflow: hidden;
        margin-bottom: 1rem;
    }

    .pd-product-image {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 1s ease;
    }

    .pd-product-image-container:hover .pd-product-image {
        transform: scale(1.05);
    }

    .pd-product-info {
        width: 100%;
        padding: 0 0.9375rem;
    }

    .pd-product-title {
        font-size: 1.25rem;
        text-align: left;
        font-family: var(--font-heading);
        color: var(--primary-color);
        font-weight: 400;
    }

    .pd-product-price {
        font-size: 1.25rem;
        font-weight: 400;
        margin-bottom: 0.5rem;
        text-align: left;
        font-family: var(--font-heading);
        color: var(--primary-color);
    }

    .pd-sale-price {
        color: var(--primary-color);
        margin-right: 0.5rem;
    }

    .pd-product-price s {
        color: #3737366d;
        font-size: 1rem;
    }

    /* Variant colors styling */
    .pd-variant-color {
        width: 1.125rem;
        height: 1.125rem;
        border-radius: 50%;
        border: 1px solid #e0e0e0;
        transition: transform 0.2s ease;
        cursor: pointer;
        display: inline-block;
        margin-right: 0.5rem;
    }

    .pd-variant-color:hover {
        transform: scale(1.1);
    }

    .pd-variant-color.selected {
        box-shadow: 0 0 0 2px white, 0 0 0 3px var(--primary-color);
        transform: scale(1.1);
    }

    .pd-pagination-link:hover svg path {
        stroke: var(--color-accent);
    }

    .pd-pagination .pd-grayed-out {
        opacity: 0.5;
        cursor: not-allowed;
    }

    /* Mobile Swiper Styles */
    @media (max-width: 768px) {
        .pd-products-grid {
            display: block;
            padding: 0;
            position: relative;
            z-index: 5;
        }

        .swiper-container {
            width: 100%;
            overflow: visible;
        }

        .swiper-slide {
            width: 80%;
            padding: 0 5px;
        }

        .swiper-button-next,
        .swiper-button-prev {
            color: var(--primary-color);
            background: rgba(255, 255, 255, 0.8);
            width: 35px;
            height: 35px;
            border-radius: 50%;
        }

        .swiper-button-next:after,
        .swiper-button-prev:after {
            font-size: 18px;
        }

        .pd-pagination {
            display: none;
        }

        .pd-product-image-container {
            width: 100%;
            height: 0;
            padding-bottom: 100%;
        }
    }

    /* Responsive styles */
    @media (max-width: 992px) {
        .pd-products-grid {
            grid-template-columns: repeat(3, 1fr);
            padding: 0 2rem;
        }
    }

    @media (max-width: 768px) {
        .pd-products-grid {
            grid-template-columns: repeat(2, 1fr);
            padding: 0 1.5rem;
        }

        .pd-product-title {
            font-size: 1.125rem;
        }
    }

    @media (max-width: 576px) {
        .pd-products-grid {
            grid-template-columns: 1fr;
            padding: 0 1rem;
        }

        .product-display {
            padding: 30px 0 50px;
        }

        .pd-product-title {
            font-size: 1rem;
        }
    }

    /* Reserve space for variant buttons */
    .pd-product-variants {
        min-height: 1.75rem;
        /* Height of variant buttons plus margin */
        display: flex;
        margin-top: 0.5rem;
    }

    .pd-product-info {
        display: flex;
        flex-direction: column;
        flex: 1;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Initialize the pagination functionality
        initPDPagination();

        // Initialize product variants
        initPDProductVariants();

        // Initialize Swiper on mobile
        if (window.innerWidth <= 768) {
            initProductDisplaySwiper();
        }

        function initPDPagination() {
            // Add event listeners to all pagination links
            const paginationLinks = document.querySelectorAll('.pd-pagination-link');
            paginationLinks.forEach(function (link) {
                link.addEventListener('click', handlePDPaginationClick);
            });
        }

        function handlePDPaginationClick(e) {
            e.preventDefault();
            const url = this.getAttribute('href');
            loadPDPage(url);
            window.history.pushState({ pdPath: url }, '', url);
        }

        function loadPDPage(url) {
            const currentScrollPosition = window.pageYOffset || document.documentElement.scrollTop;
            const productGrid = document.querySelector('.pd-products-grid');
            if (productGrid) productGrid.classList.add('loading');

            fetch(url)
                .then(response => response.text())
                .then(html => {
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');

                    const newProductGrid = doc.querySelector('.pd-products-grid');
                    const newPagination = doc.querySelector('#pd-pagination-container');

                    if (newProductGrid && productGrid) {
                        productGrid.innerHTML = newProductGrid.innerHTML;
                        productGrid.classList.remove('loading');
                        initPDProductVariants();

                        if (window.innerWidth <= 768) {
                            initProductDisplaySwiper();
                        }
                    }

                    if (newPagination) {
                        const paginationContainer = document.getElementById('pd-pagination-container');
                        if (paginationContainer) {
                            paginationContainer.innerHTML = newPagination.innerHTML;
                            initPDPagination();
                        }
                    }

                    window.scrollTo(0, currentScrollPosition);
                })
                .catch(error => {
                    console.error('Error loading products:', error);
                    if (productGrid) productGrid.classList.remove('loading');
                });
        }

        // Initialize Swiper for product display - same as collection display
        function initProductDisplaySwiper() {
            const productGrid = document.querySelector('.pd-products-grid');
            if (!productGrid) return;

            // Get all product cards
            const productCards = productGrid.querySelectorAll('.pd-product-card');

            // Create Swiper wrapper and container
            const swiperContainer = document.createElement('div');
            swiperContainer.className = 'swiper-container';

            const swiperWrapper = document.createElement('div');
            swiperWrapper.className = 'swiper-wrapper';

            // Move all products into the swiper wrapper
            productCards.forEach(card => {
                const swiperSlide = document.createElement('div');
                swiperSlide.className = 'swiper-slide';
                swiperSlide.appendChild(card.cloneNode(true));
                swiperWrapper.appendChild(swiperSlide);
            });

            // Clear product grid and add swiper structure
            productGrid.innerHTML = '';
            swiperContainer.appendChild(swiperWrapper);

            // Add navigation
            const prevButton = document.createElement('div');
            prevButton.className = 'swiper-button-prev';

            const nextButton = document.createElement('div');
            nextButton.className = 'swiper-button-next';

            swiperContainer.appendChild(prevButton);
            swiperContainer.appendChild(nextButton);

            productGrid.appendChild(swiperContainer);

            // Initialize Swiper
            new Swiper('.swiper-container', {
                slidesPerView: 'auto',
                spaceBetween: 10,
                centeredSlides: false,
                grabCursor: true,
                navigation: {
                    nextEl: '.swiper-button-next',
                    prevEl: '.swiper-button-prev',
                },
                breakpoints: {
                    320: {
                        slidesPerView: 1.3,
                        spaceBetween: 10,
                    },
                    480: {
                        slidesPerView: 1.7,
                        spaceBetween: 15,
                    },
                    576: {
                        slidesPerView: 2.2,
                        spaceBetween: 20,
                    }
                }
            });

            // Re-initialize product variants
            initPDProductVariants();
        }

        // Rest of your existing product variants code...
        function initPDProductVariants() {
            // Your existing product variants code
        }

        function getPDColorCodeForMetal(metal) {
            // Your existing color code function
        }

        // Handle window resize
        window.addEventListener('resize', function () {
            // Re-initialize on resize if needed
        });
    });
</script>

{% schema %}
{
"name": "Product Display",
"tag": "section",
"class": "section",
"settings": [
{
"type": "collection",
"id": "selected_collection",
"label": "Collection"
}
],
"presets": [
{
"name": "Product Display",
"category": "Collections"
}
]
}
{% endschema %}