<div class="breadcrumbs-container">
    {% render 'breadcrumbs' %}
</div>

<!-- Swiper -->
{{ 'https://cdn.jsdelivr.net/npm/swiper@10/swiper-bundle.min.css' | stylesheet_tag }}

<div class="product-container" data-product-container>
    <div class="single-product-grid">
        <!-- Left column: Product images -->
        <div class="product-gallery-column">
            <div class="product-gallery" data-product-gallery>
                <!-- Desktop image grid (hidden on mobile) -->
                <div class="image-grid desktop-only">
                    {% assign image_count = product.images | size %}
                    {% for i in (1..4) %}
                    <div class="image-grid-item {% if i > image_count %}empty{% endif %}">
                        {% assign image_index = i | minus: 1 %}
                        {% if image_index < image_count %} <img
                            src="{{ product.images[image_index] | img_url: 'master' }}"
                            alt="{{ product.images[image_index].alt | escape }}" class="grid-image"
                            data-image-index="{{ image_index }}"
                            data-variant-id="{{ product.selected_or_first_available_variant.id }}" {% if forloop.first
                            %}data-main-image{% endif %}>
                            {% endif %}
                    </div>
                    {% endfor %}
                </div>

                <!-- Mobile Swiper (hidden on desktop) -->
                <div class="swiper product-swiper mobile-only">
                    <div class="swiper-wrapper">
                        {% assign image_count = product.images | size %}
                        {% for i in (1..4) %}
                        {% assign image_index = i | minus: 1 %}
                        {% if image_index < image_count %} <div class="swiper-slide">
                            <img src="{{ product.images[image_index] | img_url: '800x' }}"
                                alt="{{ product.images[image_index].alt | escape }}" class="swiper-image">
                    </div>
                    {% endif %}
                    {% endfor %}
                </div>
                <!-- pagination -->
                <div class="swiper-pagination"></div>
            </div>
        </div>
    </div>

    <!-- Right column: Product details -->
    <div class="product-details-column">
        <div class="product-info">
            <h1 class="product-title">{{ product.title }}</h1>

            {% if product.description != blank %}
            <div class="product-description">
                {{ product.description }}
            </div>
            {% endif %}

            {% form 'product', product, data-product-form: '', novalidate: 'novalidate' %}
            <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}" id="VariantId">

            {% if product.has_only_default_variant == false or product.metafields.custom.color_variants != blank %}
            <div class="product-variants">
                {% comment %} Display only non-color variant selectors (if needed) {% endcomment %}
                {% for option in product.options_with_values %}
                {% if option.name != 'Color' %}
                {% endif %}
                {% endfor %}

                {% comment %} Display color options based on linked products - just color swatches {% endcomment %}
                {% if product.metafields.custom.color_variants != blank %}
                {% comment %} Get current product's color from standard metafield {% endcomment %}
                {% assign current_color = product.metafields.standard.color.value | default: product.title %}
                {% assign current_hex = color_hex_map[current_color] | default: "#CCCCCC" %}

                <div class="color-option-wrapper">
                    {% comment %} Show current product color option {% endcomment %}
                    <div class="color-option selected" style="background: {{ current_hex }};"
                        data-product-url="{{ product.url }}" data-product-handle="{{ product.handle }}"
                        data-color-name="{{ current_color }}" title="{{ current_color }}">
                    </div>

                    {% comment %} Show linked product color options {% endcomment %}
                    {% for linked_product in product.metafields.custom.color_variants %}
                    {% if linked_product.handle != product.handle %}
                    {% assign linked_color = linked_product.metafields.standard.color.value | default:
                    linked_product.title %}
                    {% assign linked_hex = color_hex_map[linked_color] | default: "#CCCCCC" %}

                    <div class="color-option" style="background: {{ linked_hex }};"
                        data-product-url="{{ linked_product.url }}" data-product-handle="{{ linked_product.handle }}"
                        data-color-name="{{ linked_color }}" title="{{ linked_color }}">
                    </div>
                    {% endif %}
                    {% endfor %}
                </div>
                {% endif %}
            </div>
            {% endif %}

            {% comment %} Show price and add to cart button {% endcomment %}

            <div class="product-price-container">
                <span class="product-price {% if product.compare_at_price > product.price %}on-sale{% endif %}"
                    data-product-price>
                    {{ product.price | money }}
                </span>

                {% if product.compare_at_price > product.price %}
                <span class="product-compare-price">{{ product.compare_at_price | money }}</span>
                {% endif %}
            </div>
            <div class="product-interactions-wrapper">
                {% if section.settings.show_quantity_selector %}
                <div class="quantity-add-wrapper">
                    <div class="quantity-selector">
                        <button type="button" class="quantity-adjust quantity-minus"
                            aria-label="Decrease quantity by one" data-quantity-minus>
                            <span>âˆ’</span>
                        </button>
                        <input type="number" id="Quantity" name="quantity" value="1" min="1" class="quantity-input"
                            aria-label="Quantity" data-quantity-input>
                        <button type="button" class="quantity-adjust quantity-plus"
                            aria-label="Increase quantity by one" data-quantity-plus>
                            <span>+</span>
                        </button>
                    </div>

                    <button type="button" name="add" id="AddToCart"
                        class="add-to-cart-button {% unless product.available %}disabled{% endunless %}" {% unless
                        product.available %}disabled="disabled" {% endunless %} data-add-to-cart>
                        {% if product.available %}
                        ADD TO CART
                        {% else %}
                        SOLD OUT
                        {% endif %}
                    </button>
                </div>
                {% else %}
                <div class="add-to-cart-wrapper">
                    <button type="button" name="add" id="AddToCart"
                        class="add-to-cart-button wide {% unless product.available %}disabled{% endunless %}" {% unless
                        product.available %}disabled="disabled" {% endunless %} data-add-to-cart>
                        {% if product.available %}
                        ADD TO CART
                        {% else %}
                        SOLD OUT
                        {% endif %}
                    </button>
                </div>
                {% endif %}

                {% if section.settings.show_buy_it_now and product.available %}
                <button type="submit" name="checkout" class="buy-it-now-button" data-buy-now>
                    BUY IT NOW
                </button>
                {% endif %}
                {% endform %}

                <!-- Wishlist button -->
                <button type="button" class="wishlist-button swym-button swym-add-to-wishlist" data-with-epi="true"
                    data-swaction="addToWishlist" data-product-id="{{ product.id }}"
                    data-variant-id="{{ product.selected_or_first_available_variant.id }}"
                    data-product-url="{{ shop.url }}{{ product.url }}">
                    {% render 'icon-favorites' %}
                </button>
            </div>

            <!-- Accordion dropdowns -->
            <div class="product-accordions">
                <div class="accordion-item">
                    <button type="button" class="accordion-header" aria-expanded="false"
                        aria-controls="product-details-content">
                        <span>PRODUCT DETAILS</span>
                        <span class="accordion-icon">+</span>
                    </button>
                    <div id="product-details-content" class="accordion-content" hidden>
                        {% if product.metafields.custom.product_content != blank %}
                        <div class="product-details-content">
                            {{ product.metafields.custom.product_content | metafield_tag }}
                        </div>
                        {% elsif section.settings.product_details_text != blank %}
                        <div class="product-details-content">
                            {{ section.settings.product_details_text }}
                        </div>
                        {% else %}
                        {% assign collection_descriptions = "" %}
                        {% for collection in product.collections %}
                        {% if collection.description != blank %}
                        {% assign collection_descriptions = collection_descriptions | append: collection.description |
                        append: " " %}
                        {% endif %}
                        {% endfor %}

                        {% if collection_descriptions != blank %}
                        <div class="collection-description">
                            {{ collection_descriptions }}
                        </div>
                        {% else %}
                        <div class="collection-description">
                            {{ product.description }}
                        </div>
                        {% endif %}
                        {% endif %}
                    </div>
                </div>

                <div class="accordion-item">
                    <button type="button" class="accordion-header" aria-expanded="false"
                        aria-controls="shipping-returns-content">
                        <span>SHIPPING AND RETURNS</span>
                        <span class="accordion-icon">+</span>
                    </button>
                    <div id="shipping-returns-content" class="accordion-content" hidden>
                        <div class="shipping-returns-content">
                            {{ section.settings.shipping_returns_text }}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
</div>

{% if section.settings.show_related_products and section.settings.related_products_limit > 0 %}
<div class="related-products-section">
    <h2 class="related-products-title">{{ section.settings.related_products_title }}</h2>

    {% if section.settings.related_products_collection != blank %}
    {% assign related_collection = collections[section.settings.related_products_collection] %}
    {% assign related_products = related_collection.products | where: "available" %}

    {% if related_products.size > 0 %}
    <div class="related-products-grid">
        {% for related_product in related_products limit: section.settings.related_products_limit %}
        {% if related_product.id != product.id %}
        <div class="related-product-card">
            <a href="{{ related_product.url }}">
                <div class="related-product-image-container">
                    {% if related_product.featured_image %}
                    <img src="{{ related_product.featured_image | img_url: '400x400', crop: 'center' }}"
                        alt="{{ related_product.featured_image.alt | escape }}" class="related-product-image">
                    {% else %}
                    {{ 'product-1' | placeholder_svg_tag: 'related-product-image placeholder-svg' }}
                    {% endif %}
                </div>
                <h3 class="related-product-title">{{ related_product.title }}</h3>
                <div class="related-product-price">{{ related_product.price | money }}</div>
            </a>
        </div>
        {% endif %}
        {% endfor %}
    </div>
    {% endif %}
    {% endif %}
</div>
{% endif %}

<!-- Swiper JS -->
<script src="https://cdn.jsdelivr.net/npm/swiper@10/swiper-bundle.min.js"></script>

<script type="application/json" id="ProductJson-{{ section.id }}">
  {{ product | json }}
</script>

<script>
    // Wait for both DOMContentLoaded and window load events
    document.addEventListener('DOMContentLoaded', function () {
        // First initialize all non-Swiper functionality
        const productJson = document.getElementById('ProductJson-{{ section.id }}');
        if (!productJson) return;

        const product = JSON.parse(productJson.textContent);

        // Initialize accordions
        initAccordions();

        // Initialize quantity selector
        initQuantitySelector();

        // Initialize the color product selector
        initColorProductSelector();

        // Initialize cart functionality
        initCartFunctionality();

        // Initialize buy now functionality
        initBuyNowFunctionality();

        // Initialize Swiper separately
        // Slight delay to ensure DOM is fully processed
        setTimeout(function () {
            initMobileSwiper();
        }, 100);

        function initAccordions() {
            const accordionHeaders = document.querySelectorAll('.accordion-header');

            accordionHeaders.forEach(header => {
                header.addEventListener('click', function () {
                    const content = document.getElementById(this.getAttribute('aria-controls'));
                    const isExpanded = this.getAttribute('aria-expanded') === 'true';

                    // Toggle aria-expanded
                    this.setAttribute('aria-expanded', !isExpanded);

                    // Toggle content visibility
                    if (isExpanded) {
                        content.hidden = true;
                        this.querySelector('.accordion-icon').textContent = '+';
                    } else {
                        content.hidden = false;
                        this.querySelector('.accordion-icon').textContent = 'âˆ’';
                    }
                });
            });
        }

        function initQuantitySelector() {
            const minusBtn = document.querySelector('[data-quantity-minus]');
            const plusBtn = document.querySelector('[data-quantity-plus]');
            const quantityInput = document.querySelector('[data-quantity-input]');

            if (!minusBtn || !plusBtn || !quantityInput) return;

            minusBtn.addEventListener('click', function () {
                let value = parseInt(quantityInput.value);
                if (value > 1) {
                    quantityInput.value = value - 1;
                }
            });

            plusBtn.addEventListener('click', function () {
                let value = parseInt(quantityInput.value);
                quantityInput.value = value + 1;
            });
        }

        function initColorProductSelector() {
            // Find all color options that represent separate products
            const colorOptions = document.querySelectorAll('.color-option[data-product-url]');
            if (!colorOptions.length) return;

            // Add click handlers to navigate to product pages
            colorOptions.forEach(option => {
                option.addEventListener('click', function () {
                    // Don't navigate if clicking the current product's color
                    if (this.classList.contains('selected')) return;

                    // Update UI first (for perceived responsiveness)
                    const colorName = this.getAttribute('data-color-name');
                    const colorLabel = document.querySelector('.metal-label .selected-option-text');
                    if (colorLabel && colorName) {
                        colorLabel.textContent = colorName;
                    }

                    // Update visual selection 
                    document.querySelectorAll('.color-option').forEach(opt => {
                        opt.classList.remove('selected');
                    });
                    this.classList.add('selected');

                    // Get product URL from data attribute
                    const productUrl = this.getAttribute('data-product-url');
                    if (productUrl) {
                        // Small delay to show the selection change before navigation
                        setTimeout(() => {
                            // Navigate to the other product's page
                            window.location.href = productUrl;
                        }, 50);
                    }
                });
            });
        }

        function initCartFunctionality() {
            const addToCartButton = document.querySelector('[data-add-to-cart]');
            if (!addToCartButton) return;

            addToCartButton.addEventListener('click', function (event) {
                event.preventDefault();

                const variantId = document.getElementById('VariantId').value;
                const quantity = document.querySelector('[data-quantity-input]')?.value || 1;

                // Add loading state to button
                addToCartButton.classList.add('loading');
                const originalText = addToCartButton.textContent;
                addToCartButton.textContent = 'ADDING...';

                // Add to cart via AJAX
                fetch('/cart/add.js', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        id: variantId,
                        quantity: quantity
                    })
                })
                    .then(response => response.json())
                    .then(data => {
                        // Restore button text
                        addToCartButton.textContent = originalText;
                        addToCartButton.classList.remove('loading');

                        // Update cart count
                        updateCartCount();

                        // Fetch the latest cart drawer content and update it
                        fetchAndUpdateCartDrawer();
                    })
                    .catch(error => {
                        console.error('Error adding to cart:', error);
                        addToCartButton.textContent = originalText;
                        addToCartButton.classList.remove('loading');
                    });
            });
        }

        function updateCartCount() {
            fetch('/cart.js')
                .then(response => response.json())
                .then(cart => {
                    const cartCountElements = document.querySelectorAll('.cart-count');
                    cartCountElements.forEach(element => {
                        element.textContent = cart.item_count;
                        element.setAttribute('data-count', cart.item_count);

                        // Show/hide based on count
                        if (cart.item_count > 0) {
                            element.style.display = 'flex';
                        } else {
                            element.style.display = 'none';
                        }
                    });
                })
                .catch(error => {
                    console.error('Error fetching cart:', error);
                });
        }

        function fetchAndUpdateCartDrawer() {
            // Fetch the cart drawer section HTML
            fetch('/?section_id=cart-drawer')
                .then(response => response.text())
                .then(html => {
                    // Parse the HTML
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');
                    const newCartDrawer = doc.getElementById('cart-drawer');

                    if (newCartDrawer) {
                        // Get the current cart drawer
                        const currentCartDrawer = document.getElementById('cart-drawer');
                        if (currentCartDrawer) {
                            // Replace the inner content
                            currentCartDrawer.innerHTML = newCartDrawer.innerHTML;

                            // Re-attach event listeners to the new content
                            attachCartDrawerEventListeners();

                            // Open the cart drawer
                            currentCartDrawer.setAttribute('aria-hidden', 'false');
                            document.body.classList.add('drawer-open');

                            // Show backdrop
                            const backdrop = document.querySelector('.cart-drawer-backdrop');
                            if (backdrop) {
                                backdrop.classList.add('visible');
                            }
                        }
                    }
                })
                .catch(error => {
                    console.error('Error updating cart drawer:', error);
                });
        }

        function attachCartDrawerEventListeners() {
            // Close button
            const closeButton = document.querySelector('.cart-drawer-close');
            if (closeButton) {
                closeButton.addEventListener('click', function () {
                    const cartDrawer = document.getElementById('cart-drawer');
                    if (cartDrawer) {
                        cartDrawer.setAttribute('aria-hidden', 'true');
                        document.body.classList.remove('drawer-open');

                        const backdrop = document.querySelector('.cart-drawer-backdrop');
                        if (backdrop) {
                            backdrop.classList.remove('visible');
                        }
                    }
                });
            }

            // Backdrop click to close
            const backdrop = document.querySelector('.cart-drawer-backdrop');
            if (backdrop) {
                backdrop.addEventListener('click', function () {
                    const cartDrawer = document.getElementById('cart-drawer');
                    if (cartDrawer) {
                        cartDrawer.setAttribute('aria-hidden', 'true');
                        document.body.classList.remove('drawer-open');
                        backdrop.classList.remove('visible');
                    }
                });
            }

            // Quantity adjustments
            const decreaseButtons = document.querySelectorAll('.quantity-button.decrease');
            decreaseButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const lineItem = this.getAttribute('data-line');
                    const input = this.nextElementSibling;
                    if (!input) return;

                    let quantity = parseInt(input.value) - 1;
                    if (quantity >= 0) {
                        updateCartItemQuantity(lineItem, quantity);
                    }
                });
            });

            const increaseButtons = document.querySelectorAll('.quantity-button.increase');
            increaseButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const lineItem = this.getAttribute('data-line');
                    const input = this.previousElementSibling;
                    if (!input) return;

                    let quantity = parseInt(input.value) + 1;
                    updateCartItemQuantity(lineItem, quantity);
                });
            });

            // Remove buttons
            const removeButtons = document.querySelectorAll('.remove-button');
            removeButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const lineItem = this.getAttribute('data-line');
                    updateCartItemQuantity(lineItem, 0);
                });
            });
        }

        function updateCartItemQuantity(lineItem, quantity) {
            fetch('/cart/change.js', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    line: parseInt(lineItem),
                    quantity: quantity
                })
            })
                .then(response => response.json())
                .then(cart => {
                    // Update cart count
                    updateCartCount();

                    // Refresh the cart drawer content
                    fetchAndUpdateCartDrawer();
                })
                .catch(error => {
                    console.error('Error updating cart item:', error);
                });
        }

        function initBuyNowFunctionality() {
            const buyNowButton = document.querySelector('[data-buy-now]');
            const productForm = document.querySelector('[data-product-form]');

            if (!buyNowButton || !productForm) return;

            buyNowButton.addEventListener('click', function (event) {
                event.preventDefault();
                event.stopPropagation();

                // Get the variant ID and quantity
                const variantId = document.getElementById('VariantId').value;
                const quantity = document.querySelector('[data-quantity-input]')?.value || 1;

                // Add loading state to button
                buyNowButton.classList.add('loading');
                const originalText = buyNowButton.textContent;
                buyNowButton.textContent = 'PROCESSING...';

                // Direct checkout using fetch
                fetch('/cart/clear.js', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                })
                    .then(response => {
                        if (!response.ok) throw new Error('Failed to clear cart');
                        return fetch('/cart/add.js', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                items: [{
                                    id: variantId,
                                    quantity: quantity
                                }]
                            })
                        });
                    })
                    .then(response => {
                        if (!response.ok) throw new Error('Failed to add item');
                        window.location.href = '/checkout';
                    })
                    .catch(error => {
                        console.error('Error in Buy Now process:', error);
                        buyNowButton.textContent = originalText;
                        buyNowButton.classList.remove('loading');
                        alert('There was an error processing your checkout. Please try again.');
                    });
            });
        }

        // Initialize Swiper on mobile
        function initMobileSwiper() {
            console.log('Initializing Swiper...');

            // Check if Swiper is loaded
            if (typeof Swiper === 'undefined') {
                console.error('Swiper not loaded yet');
                // Try again in 200ms
                setTimeout(initMobileSwiper, 200);
                return;
            }

            // Only initialize if element exists
            const swiperElement = document.querySelector('.product-swiper');
            if (!swiperElement) {
                console.error('Swiper element not found');
                return;
            }

            console.log('Swiper element found, initializing...');

            // Initialize Swiper with updated class name
            const productSwiper = new Swiper('.product-swiper', {
                init: true,
                speed: 400,
                spaceBetween: 0,
                slidesPerView: 1,
                centeredSlides: true,
                loop: false,
                observer: true,
                observeParents: true,
                pagination: {
                    el: '.swiper-pagination',
                    clickable: true,
                },
                touchRatio: 1,
                grabCursor: true,
                on: {
                    init: function () {
                        console.log('Swiper initialized successfully');
                    }
                }
            });
        }
    });
</script>

<style>
    /* Base styles */
    :root {
        --font-heading: "adobe-caslon-pro", serif;
        --font-body: "Inter", sans-serif;
        --color-text: #373736;
        --color-accent: #FFA38B;
        --color-background: #F6F4F3;
        --color-white: #ffffff;
        --color-light-gray: #e0e0e0;
    }

    .product-container {
        margin: 0 auto;
        padding: 2.5rem 3.75rem 5rem;
        /* background-color: var(--color-background); */
    }

    .single-product-grid {
        display: grid;
        grid-template-columns: 2.5fr 2fr;
        gap: 3.125rem;
    }

    /* Mobile/Desktop visibility classes */
    .mobile-only {
        display: none !important;
    }

    .desktop-only {
        display: block;
        gap: 5px;
    }

    /* Override display property based on screen size */
    @media screen and (max-width: 768px) {
        .mobile-only {
            display: block !important;
        }

        .desktop-only {
            display: none !important;
        }

        /* Hide grid on mobile */
        .image-grid {
            display: none !important;
        }
    }

    /* Product gallery styles - 2x2 grid */
    .product-gallery-column {
        display: flex;
        flex-direction: column;
    }

    .image-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        grid-template-rows: 1fr 1fr;
        aspect-ratio: 1.2 / 1.5;
    }

    .image-grid-item {
        position: relative;
        overflow: hidden;
    }

    .image-grid-item.empty {
        background-color: #F6F4F3;
    }

    .grid-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
        display: block;
    }

    /* Swiper styles */
    .product-swiper {
        width: 100%;
        height: 60vh;
        margin-bottom: 1rem;
        overflow: hidden;
        /* Ensure content doesn't overflow */
        position: relative;
        z-index: 1;
    }

    .product-swiper .swiper-slide {
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: #F6F4F3;
        width: 100% !important;
        /* Ensure slides take full width */
        height: 100%;
        /* Ensure slides take full height */
    }

    .product-swiper .swiper-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
        display: block;
        /* Ensure proper display */
    }

    .product-swiper .swiper-pagination {
        position: absolute;
        bottom: 10px;
        width: 100%;
        text-align: center;
        z-index: 10;
    }

    .product-swiper .swiper-pagination-bullet {
        width: 8px;
        height: 8px;
        background: var(--color-text);
        opacity: 0.5;
        margin: 0 4px;
    }

    .product-swiper .swiper-pagination-bullet-active {
        opacity: 1;
        background: var(--color-accent);
    }

    .swiper-pagination {
        position: absolute;
        bottom: 10px;
    }

    .swiper-pagination-bullet {
        width: 8px;
        height: 8px;
        background: var(--color-text);
        opacity: 0.5;
    }

    .swiper-pagination-bullet-active {
        opacity: 1;
        background: var(--color-accent);
    }

    /* Product details styles */
    .product-details-column {
        display: flex;
        flex-direction: column;
    }

    .product-title {
        font-family: var(--font-heading);
        font-size: 1.875rem;
        font-weight: 600;
        color: var(--color-text);
        margin: 0 0 1.5rem;
    }

    .product-description {
        font-family: var(--font-heading);
        font-size: 1.125rem;
        line-height: 140%;
        color: var(--color-text);
        margin-bottom: 1.5rem;
    }

    /* Variant selection */
    .product-variants {
        margin-bottom: 2.5rem;
        gap: 2rem;
    }

    .product-option-wrapper {
        /* margin-bottom: 1.5rem; */
    }

    .metal-label {
        font-family: var(--font-body);
        font-weight: 400;
        font-size: 1rem;
        margin-bottom: 0.75rem;
        text-transform: uppercase;
    }

    .option-label {
        display: block;
        margin-bottom: 0.5rem;
        font-family: var(--font-body);
        font-weight: 400;
        font-size: 1rem;
        text-transform: uppercase;
    }

    .color-option-wrapper {
        display: flex;
        gap: 0.75rem;
        margin-left: 0.2rem;
    }

    .color-option {
        width: 24px;
        height: 24px;
        border-radius: 50%;
        cursor: pointer;
        border: 1px solid #e0e0e0;
        transition: transform 0.2s ease;
    }

    .color-option:hover {
        transform: scale(1.1);
    }

    .color-option.selected {
        box-shadow: 0 0 0 2px var(--color-background), 0 0 0 3px #e0e0e0;
        transform: scale(1.1);
    }

    .select-wrapper {
        position: relative;
    }

    .product-option {
        width: 100%;
        padding: 0.75rem 1rem;
        border: 1px solid var(--color-light-gray);
        /* background-color: var(--color-background); */
        /* border-radius: 30px; */
        font-family: var(--font-body);
        font-size: 0.875rem;
        text-transform: uppercase;
        appearance: none;
    }

    /* Price */
    .product-price-container {
        margin-bottom: 1.5rem;
    }

    .product-price {
        font-family: var(--font-heading);
        font-size: 1.875rem;
        color: var(--color-text);
        font-weight: 600;
    }

    .product-price.on-sale {
        color: var(--color-text);
    }

    .product-compare-price {
        font-family: var(--font-heading);
        font-size: 1.4rem;
        color: #3737366d;
        /* opacity: 0.7; */
        text-decoration: line-through;
        margin-left: 0.75rem;
    }

    .product-interactions-wrapper {
        display: flex;
        justify-content: left;
        align-items: center;
        align-content: center;
        gap: 0.625rem;
        height: auto;
    }

    /* Quantity and add to cart */
    .quantity-add-wrapper {
        display: flex;
        gap: 0.625rem;
        /* margin-bottom: 1.5rem; */
    }

    .quantity-selector {
        display: flex;
        align-items: center;
        /* border: 1px solid #e0e0e0; */
    }

    .quantity-adjust {
        width: 2.5rem;
        height: 2.5rem;
        display: flex;
        align-items: center;
        justify-content: center;
        background: none;
        border: 1px solid var(--color-light-gray);
        font-size: 1.25rem;
        cursor: pointer;
        color: var(--color-text);
    }

    .quantity-input {
        width: 2.5rem;
        height: 2.5rem;
        border: none;
        text-align: center;
        font-family: var(--font-body);
        font-size: 0.875rem;
        -moz-appearance: textfield;
        background-color: var(--color-background);
    }

    .quantity-adjust:hover {
        background-color: rgba(255, 163, 139, 0.2);
    }

    .quantity-input::-webkit-outer-spin-button,
    .quantity-input::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    .add-to-cart-button {
        flex: 1;
        /* min-height: 2.5rem; */
        width: 16.563rem;
        height: 3.125rem;
        /* padding: 0 1.5rem; */
        font-family: var(--font-body);
        font-size: 1rem;
        font-weight: 500;
        text-transform: uppercase;
        background-color: var(--color-accent);
        color: white;
        /* border: 1px solid var(--color-accent); */
        border-radius: 30px;
        cursor: pointer;
        transition: background-color 0.2s ease, opacity 0.2s ease;
        position: relative;
    }

    .add-to-cart-button.wide {
        width: 100%;
    }

    .add-to-cart-button.loading {
        opacity: 0.8;
    }

    .add-to-cart-button:hover {
        background-color: #e88871;
        /* color: var(--color-accent); */
        /* border: 1px solid var(--color-accent); */
    }

    .add-to-cart-button.disabled {
        background-color: #cccccc;
        cursor: not-allowed;
    }

    .buy-it-now-button {
        /* width: 100%; */
        width: 10rem;
        height: 3.125rem;
        /* min-height: 2.5rem; */
        /* padding: 0 1.5rem; */
        font-family: var(--font-body);
        font-size: 0.875rem;
        font-weight: 500;
        text-transform: uppercase;
        background-color: transparent;
        color: var(--color-accent);
        border: 1px solid var(--color-accent);
        border-radius: 30px;
        cursor: pointer;
        transition: background-color 0.2s ease, color 0.2s ease;
        /* margin-bottom: 1.5rem; */
    }

    .buy-it-now-button:hover {
        background-color: var(--color-accent);
        color: white;
    }

    /* Wishlist button */
    .wishlist-button {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 3.125rem;
        height: 3.125rem !important;
        background: none;
        border: none;
        padding: 0 !important;
        /* margin-bottom: 2rem; */
        cursor: pointer;
        color: var(--color-text);
        transition: color 0.2s ease;
        /* opacity: 1 !important; */
    }

    .wishlist-button path:nth-child(2) {
        transition: fill 0.3s ease;
    }

    .wishlist-button:hover path:nth-child(2) {
        fill: #FFA38B;
    }

    /* Added to wishlist state - filled heart */
    .wishlist-button.swym-added svg path:nth-child(2),
    .wishlist-button.swym-adding svg path:nth-child(2) {
        fill: #FFA38B;
    }

    .swym-button.disabled {
        opacity: 1 !important;
    }

    .swym-button {
        display: flex !important;
    }

    .swym-atw-button-container.default-position {
        display: none !important;
    }

    .wishlist-button.swym-button.swym-add-to-wishlist.swym-icontext.swym-custom.swym-loaded {
        background-color: transparent !important;
    }

    /* Accordion styles */
    .product-accordions {
        margin-top: 2.5rem;
        width: 100%;
        border-top: 1px solid rgba(55, 55, 54, 0.1);
    }

    .accordion-item {
        border-bottom: 1px solid rgba(55, 55, 54, 0.1);
    }

    .accordion-header {
        width: 100%;
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1.875rem 0;
        background: none;
        border: none;
        font-family: var(--font-body);
        font-size: 1rem;
        font-weight: 400;
        /* letter-spacing: 0.05em; */
        text-transform: uppercase;
        color: var(--color-text);
        cursor: pointer;
        text-align: left;
    }

    .accordion-icon {
        font-size: 1.25rem;
        font-weight: 300;
    }

    .accordion-content {
        padding: 0 0 1.25rem;
        font-family: var(--font-body);
        font-size: 0.875rem;
        line-height: 1.6;
        color: var(--color-text);
    }

    /* Related products */
    .related-products-section {
        display: flex;
        justify-items: center;
        align-items: center;
        flex-direction: column;
        /* max-width: 1200px; */
        margin: 0 3.75rem;
        padding: 1rem 0 5rem;
        background-color: var(--color-background);
    }

    .related-products-title {
        font-family: var(--font-heading);
        font-size: 1.75rem;
        font-weight: 600;
        color: var(--color-text);
        text-align: center;
        margin-bottom: 2.5rem;
    }

    .related-products-grid {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 4rem;
        /* margin: 0 3.rem; */
        /* aspect-ratio: 1.2 / 1.5; */
    }

    .related-product-card {
        display: flex;
        flex-direction: column;
    }

    .related-product-image-container {
        width: 20vw;
        height: 50vh;
        position: relative;
        margin-bottom: 1rem;
        overflow: hidden;
    }

    .related-product-image {
        width: 100%;
        height: 50vh;
        display: block;
        transition: transform 1s ease;
    }

    .related-product-image-container:hover .related-product-image {
        transform: scale(1.05);
    }

    .related-product-title {
        font-family: var(--font-heading);
        font-size: 1.25rem;
        font-weight: 600;
        color: var(--color-text);
        margin: 1.5rem 0 0;
    }

    .related-product-price {
        font-family: var(--font-heading);
        font-size: 1rem;
        color: var(--color-text);
        font-weight: 500;
    }

    /* Responsive styles */
    @media screen and (max-width: 992px) {

        .breadcrumbs-container,
        .product-container {
            padding-left: 2rem;
            padding-right: 2rem;
        }

        .single-product-grid {
            gap: 3rem;
        }

        .product-gallery-column {
            width: 100%;
        }

        .product-title {
            font-size: 2rem;
        }

        .quantity-add-wrapper {
            display: flex;
            flex-direction: row;
        }

        .product-interactions-wrapper {
            display: flex;
        }

        .related-products-section {
            padding: 1rem 2rem 4rem;
        }

        .related-products-grid {
            grid-template-columns: repeat(3, 1fr);
            gap: 10px;
            margin-bottom: 3rem;
            /* margin: 0 2rem 3rem;           */
        }

        .related-products-section {
            padding: 0rem 1rem 2.5rem;
        }

        .related-product-image-container {
            width: 30vw;
            height: 40vh;
        }

        .related-product-image {
            width: 100%;
            height: 100%;
        }
    }

    @media screen and (max-width: 768px) {

        /* Toggle mobile/desktop visibility */
        .mobile-only {
            display: block;
        }

        .desktop-only {
            display: none;
        }

        .breadcrumbs-container,
        .product-container {
            padding-left: 1.5rem;
            padding-right: 1.5rem;
        }

        .product-container {
            margin-top: 5rem;
        }

        .single-product-grid {
            grid-template-columns: 1fr;
            gap: 1rem;
        }

        .product-gallery-column {
            width: 100%;
        }

        .product-title {
            font-size: 1.75rem;
        }

        .quantity-add-wrapper {
            display: flex;
            flex-direction: row;
        }

        .product-interactions-wrapper {
            display: flex;
        }

        .related-products-section {
            padding: 2.5rem 1.5rem 3rem;
        }

        .related-products-grid {
            grid-template-columns: repeat(2, 1fr);
            gap: 20px;
            margin-bottom: 3rem;
            /* margin: 0 2rem 3rem;           */
        }

        .related-products-section {
            padding: 0rem 1rem 2.5rem;
        }

        .related-product-image-container {
            width: 43vw;
            height: 50vh;
        }

        .related-product-image {
            width: 100%;
            height: 100%;
        }
    }

    @media screen and (max-width: 576px) {

        .product-container {
            margin-top: 4rem;
        }
        
        .product-title {
            margin-bottom: 0;
        }

        .breadcrumbs-container,
        .product-container {
            padding-left: 1rem;
            padding-right: 1rem;
        }

        /* Modified mobile layout - vertical stacking of buttons */
        .quantity-add-wrapper {
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 100%;
            gap: 0.75rem;
        }

        .quantity-selector {
            /* display: flex; */
            width: 100%;
            margin-bottom: 0.75rem;
        }

        .quantity-adjust {
            flex: 0 0 auto;
        }

        .quantity-input {
            flex: 1;
            width: 100%;
        }

        .add-to-cart-button {
            width: 100%;
            margin: 0;
        }

        .buy-it-now-button {
            width: 100%;
            margin-top: 0.75rem;
        }

        /* Adjust overall product interactions container */
        .product-interactions-wrapper {
            width: 90vw;
            display: flex;
            flex-direction: column;
            /* align-items: center; */
            justify-content: center;
            gap: 0rem;
        }

        /* Move wishlist button to be separate */
        .wishlist-button {
            position: absolute !important;
            background-color: transparent !important;
            top: 7.5rem;
            right: 2.2rem;
            z-index: 1;
        }

        .related-products-grid {
            gap: 40px;
            margin-bottom: 3rem;
        }

        .related-products-section {
            padding: 0rem 1rem 2.5rem;
        }

        .related-product-image-container {
            width: 90vw;
            height: 60vh;
        }

        .related-product-image {
            width: 100%;
            height: 100%;
        }

        .related-products-grid {
            grid-template-columns: 1fr;
        }
    }
</style>

{% schema %}
{
"name": "Product Page",
"settings": [
{
"type": "header",
"content": "Product Options"
},
{
"type": "checkbox",
"id": "show_quantity_selector",
"label": "Show quantity selector",
"default": true
},
{
"type": "checkbox",
"id": "show_buy_it_now",
"label": "Show 'Buy It Now' button",
"default": false
},
{
"type": "header",
"content": "Product Content"
},
{
"type": "richtext",
"id": "product_details_text",
"label": "Product Details text",
"info": "Custom text for the Product Details accordion. If empty, collection descriptions will be used."
},
{
"type": "header",
"content": "Shipping & Returns"
},
{
"type": "richtext",
"id": "shipping_returns_text",
"label": "Shipping & Returns text",
"default": "<p>Free domestic shipping on all orders over Â£75.</p>"
},
{
"type": "header",
"content": "Related Products"
},
{
"type": "checkbox",
"id": "show_related_products",
"label": "Show related products",
"default": true
},
{
"type": "text",
"id": "related_products_title",
"label": "Related products title",
"default": "You May Also Like"
},
{
"type": "collection",
"id": "related_products_collection",
"label": "Related products collection"
},
{
"type": "range",
"id": "related_products_limit",
"min": 2,
"max": 8,
"step": 1,
"label": "Number of related products",
"default": 4
}
]
}
{% endschema %}