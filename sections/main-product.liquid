{% comment %}
sections/main-product.liquid
Main product template section for Tashola theme
{% endcomment %}

<div class="breadcrumbs-container">
    {% render 'breadcrumbs' %}
</div>

<div class="product-container" data-product-container>
    <div class="product-grid">
        <!-- Left column: Product images 2x2 grid -->
        <div class="product-gallery-column">
            <div class="product-gallery" data-product-gallery>
                <div class="image-grid">
                    {% assign image_count = product.images | size %}
                    {% for i in (1..4) %}
                    <div class="image-grid-item {% if i > image_count %}empty{% endif %}">
                        {% assign image_index = i | minus: 1 %}
                        {% if image_index < image_count %} <img
                            src="{{ product.images[image_index] | img_url: 'master' }}"
                            alt="{{ product.images[image_index].alt | escape }}" class="grid-image"
                            data-image-index="{{ image_index }}"
                            data-variant-id="{{ product.selected_or_first_available_variant.id }}" {% if forloop.first
                            %}data-main-image{% endif %}>
                            {% endif %}
                    </div>
                    {% endfor %}
                </div>
            </div>
        </div>

        <!-- Right column: Product details -->
        <div class="product-details-column">
            <div class="product-info">
                <h1 class="product-title">{{ product.title }}</h1>

                {% if product.description != blank %}
                <div class="product-description">
                    {{ product.description }}
                </div>
                {% endif %}

                {% form 'product', product, data-product-form: '', novalidate: 'novalidate' %}
                <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}"
                    id="VariantId">

                {% if product.has_only_default_variant == false %}
                <div class="product-variants">
                    {% for option in product.options_with_values %}
                    <div class="product-option-wrapper" data-option-index="{{ forloop.index0 }}">
                        {% if option.name == 'Metal' or option.name == 'Color' %}
                        <div class="metal-label">METAL: <span class="selected-option-text">{{ option.selected_value
                                }}</span></div>
                        <div class="color-option-wrapper">
                            {% for value in option.values %}
                            {% assign color_code = "" %}
                            {% if value contains 'Gold' and value != 'Rose Gold' %}
                            {% assign color_code = "#E5D295" %}
                            {% elsif value contains 'Silver' %}
                            {% assign color_code = "#CDCCCC" %}
                            {% elsif value contains 'Rose Gold' %}
                            {% assign color_code = "#B76E79" %}
                            {% elsif value contains 'Platinum' %}
                            {% assign color_code = "#E5E4E2" %}
                            {% else %}
                            {% assign color_code = "#373736" %}
                            {% endif %}

                            <div class="color-option {% if option.selected_value == value %}selected{% endif %}"
                                style="background-color: {{ color_code }};" data-option-value="{{ value }}"
                                data-option-position="{{ forloop.index0 }}" data-index="{{ forloop.index0 }}"
                                title="{{ value }}">
                            </div>
                            {% endfor %}
                        </div>
                        {% else %}
                        <div class="option-label">{{ option.name }}: <span class="selected-option-text">{{
                                option.selected_value }}</span></div>
                        <div class="select-wrapper">
                            <select class="product-option single-option-selector" id="{{ option.name | handleize }}"
                                name="options[{{ option.name }}]" data-index="{{ forloop.index0 }}">
                                {% for value in option.values %}
                                <option value="{{ value }}" {% if option.selected_value==value %}selected="selected" {%
                                    endif %}>{{ value }}</option>
                                {% endfor %}
                            </select>
                        </div>
                        {% endif %}
                    </div>
                    {% endfor %}
                </div>
                {% endif %}

                <div class="product-price-container">
                    <span class="product-price {% if product.compare_at_price > product.price %}on-sale{% endif %}"
                        data-product-price>
                        {{ product.price | money }}
                    </span>

                    {% if product.compare_at_price > product.price %}
                    <span class="product-compare-price">{{ product.compare_at_price | money }}</span>
                    {% endif %}
                </div>

                {% if section.settings.show_quantity_selector %}
                <div class="quantity-add-wrapper">
                    <div class="quantity-selector">
                        <button type="button" class="quantity-adjust quantity-minus"
                            aria-label="Decrease quantity by one" data-quantity-minus>
                            <span>âˆ’</span>
                        </button>
                        <input type="number" id="Quantity" name="quantity" value="1" min="1" class="quantity-input"
                            aria-label="Quantity" data-quantity-input>
                        <button type="button" class="quantity-adjust quantity-plus"
                            aria-label="Increase quantity by one" data-quantity-plus>
                            <span>+</span>
                        </button>
                    </div>

                    <button type="button" name="add" id="AddToCart"
                        class="add-to-cart-button {% unless product.available %}disabled{% endunless %}" {% unless
                        product.available %}disabled="disabled" {% endunless %} data-add-to-cart>
                        {% if product.available %}
                        ADD TO CART
                        {% else %}
                        SOLD OUT
                        {% endif %}
                    </button>
                </div>
                {% else %}
                <div class="add-to-cart-wrapper">
                    <button type="button" name="add" id="AddToCart"
                        class="add-to-cart-button wide {% unless product.available %}disabled{% endunless %}" {% unless
                        product.available %}disabled="disabled" {% endunless %} data-add-to-cart>
                        {% if product.available %}
                        ADD TO CART
                        {% else %}
                        SOLD OUT
                        {% endif %}
                    </button>
                </div>
                {% endif %}

                {% if section.settings.show_buy_it_now and product.available %}
                <button type="submit" name="checkout" class="buy-it-now-button" data-buy-now>
                    BUY IT NOW
                </button>
                {% endif %}
                {% endform %}

                <!-- Wishlist button -->
                <button type="button" class="wishlist-button">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
                        stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round">
                        <path
                            d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z">
                        </path>
                    </svg>
                </button>
            </div>

            <!-- Accordion dropdowns -->
            <div class="product-accordions">
                <div class="accordion-item">
                    <button type="button" class="accordion-header" aria-expanded="false"
                        aria-controls="product-details-content">
                        <span>PRODUCT DETAILS</span>
                        <span class="accordion-icon">+</span>
                    </button>
                    <div id="product-details-content" class="accordion-content" hidden>
                        {% assign collection_descriptions = "" %}
                        {% for collection in product.collections %}
                        {% if collection.description != blank %}
                        {% assign collection_descriptions = collection_descriptions | append: collection.description |
                        append: " " %}
                        {% endif %}
                        {% endfor %}

                        {% if collection_descriptions != blank %}
                        <div class="collection-description">
                            {{ collection_descriptions }}
                        </div>
                        {% else %}
                        <div class="collection-description">
                            {{ product.description }}
                        </div>
                        {% endif %}
                    </div>
                </div>

                <div class="accordion-item">
                    <button type="button" class="accordion-header" aria-expanded="false"
                        aria-controls="shipping-returns-content">
                        <span>SHIPPING AND RETURNS</span>
                        <span class="accordion-icon">+</span>
                    </button>
                    <div id="shipping-returns-content" class="accordion-content" hidden>
                        <div class="shipping-returns-content">
                            {{ section.settings.shipping_returns_text }}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

{% if section.settings.show_related_products and section.settings.related_products_limit > 0 %}
<div class="related-products-section">
    <h2 class="related-products-title">{{ section.settings.related_products_title }}</h2>

    {% if section.settings.related_products_collection != blank %}
    {% assign related_collection = collections[section.settings.related_products_collection] %}
    {% assign related_products = related_collection.products | where: "available" %}

    {% if related_products.size > 0 %}
    <div class="related-products-grid">
        {% for related_product in related_products limit: section.settings.related_products_limit %}
        {% if related_product.id != product.id %}
        <div class="related-product-card">
            <a href="{{ related_product.url }}">
                <div class="related-product-image-container">
                    {% if related_product.featured_image %}
                    <img src="{{ related_product.featured_image | img_url: '400x400', crop: 'center' }}"
                        alt="{{ related_product.featured_image.alt | escape }}" class="related-product-image">
                    {% else %}
                    {{ 'product-1' | placeholder_svg_tag: 'related-product-image placeholder-svg' }}
                    {% endif %}
                </div>
                <h3 class="related-product-title">{{ related_product.title }}</h3>
                <div class="related-product-price">{{ related_product.price | money }}</div>
            </a>
        </div>
        {% endif %}
        {% endfor %}
    </div>
    {% endif %}
    {% endif %}
</div>
{% endif %}

<script type="application/json" id="ProductJson-{{ section.id }}">
  {{ product | json }}
</script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Get product data
        const productJson = document.getElementById('ProductJson-{{ section.id }}');
        if (!productJson) return;

        const product = JSON.parse(productJson.textContent);

        // Initialize accordions
        initAccordions();

        // Initialize quantity selector
        initQuantitySelector();

        // Initialize variant selection with direct approach
        initSimpleVariantSelector();

        // Initialize cart functionality
        initCartFunctionality();

        function initAccordions() {
            const accordionHeaders = document.querySelectorAll('.accordion-header');

            accordionHeaders.forEach(header => {
                header.addEventListener('click', function () {
                    const content = document.getElementById(this.getAttribute('aria-controls'));
                    const isExpanded = this.getAttribute('aria-expanded') === 'true';

                    // Toggle aria-expanded
                    this.setAttribute('aria-expanded', !isExpanded);

                    // Toggle content visibility
                    if (isExpanded) {
                        content.hidden = true;
                        this.querySelector('.accordion-icon').textContent = '+';
                    } else {
                        content.hidden = false;
                        this.querySelector('.accordion-icon').textContent = 'âˆ’';
                    }
                });
            });
        }

        function initQuantitySelector() {
            const minusBtn = document.querySelector('[data-quantity-minus]');
            const plusBtn = document.querySelector('[data-quantity-plus]');
            const quantityInput = document.querySelector('[data-quantity-input]');

            if (!minusBtn || !plusBtn || !quantityInput) return;

            minusBtn.addEventListener('click', function () {
                let value = parseInt(quantityInput.value);
                if (value > 1) {
                    quantityInput.value = value - 1;
                }
            });

            plusBtn.addEventListener('click', function () {
                let value = parseInt(quantityInput.value);
                quantityInput.value = value + 1;
            });
        }

        function initSimpleVariantSelector() {
            // Find out which option is the Metal option
            let metalOptionIndex = -1;
            if (product.options) {
                for (let i = 0; i < product.options.length; i++) {
                    if (product.options[i] === 'Metal' || product.options[i] === 'Color') {
                        metalOptionIndex = i;
                        break;
                    }
                }
            }

            // If no Metal option found, exit this function
            if (metalOptionIndex === -1) return;

            // Create a map of metal values to their variants and images
            const metalVariants = {};

            product.variants.forEach(variant => {
                const metalValue = variant.options[metalOptionIndex];

                // If this is the first time we're seeing this metal value
                if (!metalVariants[metalValue]) {
                    metalVariants[metalValue] = {
                        variantId: variant.id,
                        price: variant.price,
                        featured_image: variant.featured_image ? variant.featured_image.src : null
                    };
                }
            });

            // Add click handlers to color options
            const colorOptions = document.querySelectorAll('.color-option');
            colorOptions.forEach(option => {
                option.addEventListener('click', function () {
                    // Get the metal value and update the UI
                    const metalValue = this.getAttribute('data-option-value');

                    // Mark this option as selected visually
                    document.querySelectorAll('.color-option').forEach(opt => {
                        opt.classList.remove('selected');
                    });
                    this.classList.add('selected');

                    // Update the metal label text
                    const metalLabel = document.querySelector('.metal-label .selected-option-text');
                    if (metalLabel) {
                        metalLabel.textContent = metalValue;
                    }

                    // Get the variant info for this metal
                    const variantInfo = metalVariants[metalValue];
                    if (!variantInfo) return;

                    // Update the variant ID in the form
                    const variantIdInput = document.getElementById('VariantId');
                    if (variantIdInput) {
                        variantIdInput.value = variantInfo.variantId;
                    }

                    // Update the price
                    const priceElement = document.querySelector('[data-product-price]');
                    if (priceElement && variantInfo.price) {
                        // Format price as currency
                        const formatter = new Intl.NumberFormat('en-GB', {
                            style: 'currency',
                            currency: 'GBP',
                            minimumFractionDigits: 2
                        });
                        priceElement.textContent = formatter.format(variantInfo.price / 100);
                    }

                    // Update the image if this variant has one
                    if (variantInfo.featured_image) {
                        const mainImage = document.querySelector('[data-main-image]');
                        if (mainImage) {
                            mainImage.src = variantInfo.featured_image;
                        }
                    }
                });
            });

            // Trigger click on the selected option (or first option if none selected)
            const selectedOption = document.querySelector('.color-option.selected');
            if (selectedOption) {
                selectedOption.click();
            } else if (colorOptions.length > 0) {
                colorOptions[0].click();
            }
        }

        function initCartFunctionality() {
            const addToCartButton = document.querySelector('[data-add-to-cart]');
            if (!addToCartButton) return;

            addToCartButton.addEventListener('click', function (event) {
                event.preventDefault();

                const variantId = document.getElementById('VariantId').value;
                const quantity = document.querySelector('[data-quantity-input]')?.value || 1;

                // Add loading state to button
                addToCartButton.classList.add('loading');
                const originalText = addToCartButton.textContent;
                addToCartButton.textContent = 'ADDING...';

                // Add to cart via AJAX
                fetch('/cart/add.js', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        id: variantId,
                        quantity: quantity
                    })
                })
                    .then(response => response.json())
                    .then(data => {
                        // Restore button text
                        addToCartButton.textContent = originalText;
                        addToCartButton.classList.remove('loading');

                        // Update cart count
                        updateCartCount();

                        // Fetch the latest cart drawer content and update it
                        fetchAndUpdateCartDrawer();
                    })
                    .catch(error => {
                        console.error('Error adding to cart:', error);
                        addToCartButton.textContent = originalText;
                        addToCartButton.classList.remove('loading');
                    });
            });
        }

        function updateCartCount() {
            fetch('/cart.js')
                .then(response => response.json())
                .then(cart => {
                    const cartCountElements = document.querySelectorAll('.cart-count');
                    cartCountElements.forEach(element => {
                        element.textContent = cart.item_count;
                        element.setAttribute('data-count', cart.item_count);

                        // Show/hide based on count
                        if (cart.item_count > 0) {
                            element.style.display = 'flex';
                        } else {
                            element.style.display = 'none';
                        }
                    });
                })
                .catch(error => {
                    console.error('Error fetching cart:', error);
                });
        }

        function fetchAndUpdateCartDrawer() {
            // Fetch the cart drawer section HTML
            fetch('/?section_id=cart-drawer')
                .then(response => response.text())
                .then(html => {
                    // Parse the HTML
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');
                    const newCartDrawer = doc.getElementById('cart-drawer');

                    if (newCartDrawer) {
                        // Get the current cart drawer
                        const currentCartDrawer = document.getElementById('cart-drawer');
                        if (currentCartDrawer) {
                            // Replace the inner content
                            currentCartDrawer.innerHTML = newCartDrawer.innerHTML;

                            // Re-attach event listeners to the new content
                            attachCartDrawerEventListeners();

                            // Open the cart drawer
                            currentCartDrawer.setAttribute('aria-hidden', 'false');
                            document.body.classList.add('drawer-open');

                            // Show backdrop
                            const backdrop = document.querySelector('.cart-drawer-backdrop');
                            if (backdrop) {
                                backdrop.classList.add('visible');
                            }
                        }
                    }
                })
                .catch(error => {
                    console.error('Error updating cart drawer:', error);
                });
        }

        function attachCartDrawerEventListeners() {
            // Close button
            const closeButton = document.querySelector('.cart-drawer-close');
            if (closeButton) {
                closeButton.addEventListener('click', function () {
                    const cartDrawer = document.getElementById('cart-drawer');
                    if (cartDrawer) {
                        cartDrawer.setAttribute('aria-hidden', 'true');
                        document.body.classList.remove('drawer-open');

                        const backdrop = document.querySelector('.cart-drawer-backdrop');
                        if (backdrop) {
                            backdrop.classList.remove('visible');
                        }
                    }
                });
            }

            // Backdrop click to close
            const backdrop = document.querySelector('.cart-drawer-backdrop');
            if (backdrop) {
                backdrop.addEventListener('click', function () {
                    const cartDrawer = document.getElementById('cart-drawer');
                    if (cartDrawer) {
                        cartDrawer.setAttribute('aria-hidden', 'true');
                        document.body.classList.remove('drawer-open');
                        backdrop.classList.remove('visible');
                    }
                });
            }

            // Quantity adjustments
            const decreaseButtons = document.querySelectorAll('.quantity-button.decrease');
            decreaseButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const lineItem = this.getAttribute('data-line');
                    const input = this.nextElementSibling;
                    if (!input) return;

                    let quantity = parseInt(input.value) - 1;
                    if (quantity >= 0) {
                        updateCartItemQuantity(lineItem, quantity);
                    }
                });
            });

            const increaseButtons = document.querySelectorAll('.quantity-button.increase');
            increaseButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const lineItem = this.getAttribute('data-line');
                    const input = this.previousElementSibling;
                    if (!input) return;

                    let quantity = parseInt(input.value) + 1;
                    updateCartItemQuantity(lineItem, quantity);
                });
            });

            // Remove buttons
            const removeButtons = document.querySelectorAll('.remove-button');
            removeButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const lineItem = this.getAttribute('data-line');
                    updateCartItemQuantity(lineItem, 0);
                });
            });
        }

        function updateCartItemQuantity(lineItem, quantity) {
            fetch('/cart/change.js', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    line: parseInt(lineItem),
                    quantity: quantity
                })
            })
                .then(response => response.json())
                .then(cart => {
                    // Update cart count
                    updateCartCount();

                    // Refresh the cart drawer content
                    fetchAndUpdateCartDrawer();
                })
                .catch(error => {
                    console.error('Error updating cart item:', error);
                });
        }
    });
</script>

<style>
    /* Base styles */
    :root {
        --font-heading: "adobe-caslon-pro", serif;
        --font-body: "Inter", sans-serif;
        --color-text: #373736;
        --color-accent: #FFA38B;
        --color-background: #F6F4F3;
        --color-white: #ffffff;
        --color-light-gray: #e0e0e0;
    }

    .breadcrumbs-container {
        margin: 0 auto;
        padding: 2.5rem 3.75rem 0;
        margin-top: var(--header-height);
        background-color: var(--color-background);
    }

    .product-container {
        margin: 0 auto;
        padding: 2.5rem 3.75rem 5rem;
        background-color: var(--color-background);
    }

    .product-grid {
        display: grid;
        grid-template-columns: 3fr 2fr;
        gap: 4rem;
    }

    /* Product gallery styles - 2x2 grid */
    .product-gallery-column {
        display: flex;
        flex-direction: column;
        width: 60%;
    }

    .image-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        grid-template-rows: 1fr 1fr;
        gap: 8px;
        aspect-ratio: 1 / 1;
    }

    .image-grid-item {
        position: relative;
        overflow: hidden;
        background-color: #f6f4f3;
    }

    .image-grid-item.empty {
        background-color: #f0f0f0;
    }

    .grid-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
        display: block;
    }

    /* Product details styles */
    .product-details-column {
        display: flex;
        flex-direction: column;
    }

    .product-title {
        font-family: var(--font-heading);
        font-size: 2.25rem;
        font-weight: 600;
        color: var(--color-text);
        margin: 0 0 1rem;
    }

    .product-description {
        font-family: var(--font-heading);
        font-size: 1rem;
        line-height: 1.5;
        color: var(--color-text);
        margin-bottom: 2rem;
    }

    /* Variant selection */
    .product-variants {
        margin-bottom: 1.5rem;
    }

    .product-option-wrapper {
        margin-bottom: 1.5rem;
    }

    .metal-label {
        font-family: var(--font-heading);
        font-weight: 500;
        font-size: 1rem;
        margin-bottom: 0.75rem;
        text-transform: uppercase;
    }

    .option-label {
        display: block;
        margin-bottom: 0.5rem;
        font-family: var(--font-heading);
        font-weight: 500;
        font-size: 1rem;
    }

    .color-option-wrapper {
        display: flex;
        gap: 0.75rem;
    }

    .color-option {
        width: 24px;
        height: 24px;
        border-radius: 50%;
        cursor: pointer;
        border: 1px solid #e0e0e0;
        transition: transform 0.2s ease;
    }

    .color-option:hover {
        transform: scale(1.1);
    }

    .color-option.selected {
        box-shadow: 0 0 0 2px #fff, 0 0 0 3px var(--color-text);
        transform: scale(1.1);
    }

    .select-wrapper {
        position: relative;
    }

    .product-option {
        width: 100%;
        padding: 0.75rem 1rem;
        border: 1px solid #e0e0e0;
        border-radius: 0;
        font-family: var(--font-body);
        font-size: 0.875rem;
        appearance: none;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='%23373736' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M6 9l6 6 6-6'/%3E%3C/svg%3E");
        background-repeat: no-repeat;
        background-position: right 0.75rem center;
        background-size: 1rem;
    }

    /* Price */
    .product-price-container {
        margin-bottom: 1.5rem;
    }

    .product-price {
        font-family: var(--font-heading);
        font-size: 1.5rem;
        color: var(--color-text);
    }

    .product-price.on-sale {
        color: var(--color-accent);
    }

    .product-compare-price {
        font-family: var(--font-heading);
        font-size: 1.5rem;
        color: var(--color-text);
        opacity: 0.7;
        text-decoration: line-through;
        margin-left: 0.75rem;
    }

    /* Quantity and add to cart */
    .quantity-add-wrapper {
        display: flex;
        gap: 1rem;
        margin-bottom: 1.5rem;
    }

    .quantity-selector {
        display: flex;
        align-items: center;
        border: 1px solid #e0e0e0;
    }

    .quantity-adjust {
        width: 2.5rem;
        height: 2.5rem;
        display: flex;
        align-items: center;
        justify-content: center;
        background: none;
        border: none;
        font-size: 1.25rem;
        cursor: pointer;
        color: var(--color-text);
    }

    .quantity-input {
        width: 2.5rem;
        height: 2.5rem;
        border: none;
        text-align: center;
        font-family: var(--font-body);
        font-size: 0.875rem;
        -moz-appearance: textfield;
    }

    .quantity-input::-webkit-outer-spin-button,
    .quantity-input::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    .add-to-cart-button {
        flex: 1;
        min-height: 2.5rem;
        padding: 0 1.5rem;
        font-family: var(--font-body);
        font-size: 0.875rem;
        font-weight: 500;
        text-transform: uppercase;
        background-color: var(--color-accent);
        color: white;
        border: none;
        cursor: pointer;
        transition: background-color 0.2s ease, opacity 0.2s ease;
        position: relative;
    }

    .add-to-cart-button.wide {
        width: 100%;
    }

    .add-to-cart-button.loading {
        opacity: 0.8;
    }

    .add-to-cart-button:hover {
        background-color: #ff8b6b;
    }

    .add-to-cart-button.disabled {
        background-color: #cccccc;
        cursor: not-allowed;
    }

    .buy-it-now-button {
        width: 100%;
        min-height: 2.5rem;
        padding: 0 1.5rem;
        font-family: var(--font-body);
        font-size: 0.875rem;
        font-weight: 500;
        text-transform: uppercase;
        background-color: transparent;
        color: var(--color-text);
        border: 1px solid var(--color-text);
        cursor: pointer;
        transition: background-color 0.2s ease, color 0.2s ease;
        margin-bottom: 1.5rem;
    }

    .buy-it-now-button:hover {
        background-color: var(--color-text);
        color: white;
    }

    /* Wishlist button */
    .wishlist-button {
        background: none;
        border: none;
        padding: 0;
        margin-bottom: 2rem;
        cursor: pointer;
        color: var(--color-text);
        transition: color 0.2s ease;
    }

    .wishlist-button:hover {
        color: var(--color-accent);
    }

    /* Accordion styles */
    .product-accordions {
        width: 100%;
        border-top: 1px solid rgba(55, 55, 54, 0.1);
    }

    .accordion-item {
        border-bottom: 1px solid rgba(55, 55, 54, 0.1);
    }

    .accordion-header {
        width: 100%;
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1.25rem 0;
        background: none;
        border: none;
        font-family: var(--font-heading);
        font-size: 0.75rem;
        font-weight: 500;
        letter-spacing: 0.05em;
        text-transform: uppercase;
        color: var(--color-text);
        cursor: pointer;
        text-align: left;
    }

    .accordion-icon {
        font-size: 1.25rem;
        font-weight: 300;
    }

    .accordion-content {
        padding: 0 0 1.25rem;
        font-family: var(--font-body);
        font-size: 0.875rem;
        line-height: 1.6;
        color: var(--color-text);
    }

    /* Related products */
    .related-products-section {
        max-width: 1200px;
        margin: 0 auto;
        padding: 3.75rem 3.75rem 5rem;
        background-color: var(--color-background);
    }

    .related-products-title {
        font-family: var(--font-heading);
        font-size: 1.75rem;
        font-weight: 600;
        color: var(--color-text);
        text-align: center;
        margin-bottom: 2.5rem;
    }

    .related-products-grid {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 2rem;
    }

    .related-product-card {
        display: flex;
        flex-direction: column;
    }

    .related-product-image-container {
        width: 100%;
        position: relative;
        margin-bottom: 1rem;
        overflow: hidden;
    }

    .related-product-image {
        width: 100%;
        height: auto;
        display: block;
        transition: transform 1s ease;
    }

    .related-product-image-container:hover .related-product-image {
        transform: scale(1.05);
    }

    .related-product-title {
        font-family: var(--font-heading);
        font-size: 1rem;
        font-weight: 500;
        color: var(--color-text);
        margin: 0 0 0.5rem;
    }

    .related-product-price {
        font-family: var(--font-heading);
        font-size: 0.875rem;
        color: var(--color-text);
    }

    /* Responsive styles */
    @media screen and (max-width: 992px) {

        .breadcrumbs-container,
        .product-container {
            padding-left: 2rem;
            padding-right: 2rem;
        }

        .product-grid {
            gap: 3rem;
        }

        .product-gallery-column {
            width: 100%;
        }

        .product-title {
            font-size: 2rem;
        }

        .related-products-section {
            padding: 3rem 2rem 4rem;
        }

        .related-products-grid {
            grid-template-columns: repeat(3, 1fr);
        }
    }

    @media screen and (max-width: 768px) {

        .breadcrumbs-container,
        .product-container {
            padding-left: 1.5rem;
            padding-right: 1.5rem;
        }

        .product-grid {
            grid-template-columns: 1fr;
            gap: 2rem;
        }

        .product-gallery-column {
            width: 100%;
        }

        .product-title {
            font-size: 1.75rem;
        }

        .related-products-section {
            padding: 2.5rem 1.5rem 3rem;
        }

        .related-products-grid {
            grid-template-columns: repeat(2, 1fr);
        }
    }

    @media screen and (max-width: 576px) {

        .breadcrumbs-container,
        .product-container {
            padding-left: 1rem;
            padding-right: 1rem;
        }

        .quantity-add-wrapper {
            flex-direction: column;
        }

        .quantity-selector {
            width: 100%;
        }

        .quantity-input {
            flex: 1;
        }

        .related-products-section {
            padding: 2rem 1rem 2.5rem;
        }

        .related-products-grid {
            grid-template-columns: 1fr;
        }
    }
</style>

{% schema %}
{
"name": "Product Page",
"settings": [
{
"type": "header",
"content": "Product Options"
},
{
"type": "checkbox",
"id": "show_quantity_selector",
"label": "Show quantity selector",
"default": true
},
{
"type": "checkbox",
"id": "show_buy_it_now",
"label": "Show 'Buy It Now' button",
"default": false
},
{
"type": "header",
"content": "Shipping & Returns"
},
{
"type": "richtext",
"id": "shipping_returns_text",
"label": "Shipping & Returns text",
"default": "<p>Free domestic shipping on all orders over Â£75.</p>"
},
{
"type": "header",
"content": "Related Products"
},
{
"type": "checkbox",
"id": "show_related_products",
"label": "Show related products",
"default": true
},
{
"type": "text",
"id": "related_products_title",
"label": "Related products title",
"default": "You May Also Like"
},
{
"type": "collection",
"id": "related_products_collection",
"label": "Related products collection"
},
{
"type": "range",
"id": "related_products_limit",
"min": 2,
"max": 8,
"step": 1,
"label": "Number of related products",
"default": 4
}
]
}
{% endschema %}